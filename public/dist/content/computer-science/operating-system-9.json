{"layout":"post-content","title":"운영체제 - 프로세스 동기화 1","date":"2020-01-06T00:00:00.000Z","tags":["os"],"categories":["operating-system"],"body":"<blockquote>\n<ol>\n<li>프로세스 동기화란?</li>\n<li>임계구역이란?</li>\n<li>세마포란?</li>\n</ol>\n</blockquote>\n<h1>프로세스 동기화(Process Synchronization, Thread Synchronization)</h1>\n<p>프로세스들이 서로 공유하는 데이터에 동시에 접근할 때 순서대로 실행하여 <strong>일관성있는 데이터를 유지</strong>하는 것</p>\n<ul>\n<li>Independent : 프로세스1과 프로세스2가 관계가 없을 때</li>\n<li>Cooperating : 다른 프로세스에게 영향을 미치거나 다른 프로세스로부터 영향을 받을 때</li>\n<li>프로세스 간 통신 : 전자 우편, 파일 전송</li>\n<li>프로세스 간 자원 공유 : 메모리 상의 자료, 데이터베이스 등</li>\n<li>실생활 예 : 명절 기차표 예약, 대학 온라인 수강신청, 실시간 주식 거래</li>\n</ul>\n<h2>프로세스/쓰레드 동기화를 하려면?</h2>\n<ul>\n<li>임계구역 문제 해결(틀린 답이 나오지 않도록)</li>\n<li>프로세스 실행 순서 제어(원하는 대로)</li>\n<li>busy wait 등 비효율성은 제거</li>\n</ul>\n<h2>동기화 도구</h2>\n<ul>\n<li>세마포(Semaphores)</li>\n<li>모니터(Monitors)</li>\n<li>Misc.</li>\n</ul>\n<h2>은행 계좌 예시</h2>\n<p>아래의 코드는 공통 변수(balance)에 대해 동시 업데이트를 수행하여 0이 아닌 잘못된 결과값이 출력된다. 이는 한번에 한 쓰레드만 업데이트하도록 하여 해결할 수 있다. -&gt; <strong>임계구역 문제</strong></p>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Test</span> </span>{\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> InterruptedException </span>{\n  BankAccount b = <span class=\"hljs-keyword\">new</span>\n  BankAccount();\n  Parent p = <span class=\"hljs-keyword\">new</span> Parent(b);\n  Child c = <span class=\"hljs-keyword\">new</span> Child(b);\n  p.start();\n  c.start();\n  p.join();\n  c.join();\n  System.out.println( <span class=\"hljs-string\">\"\\nbalance = \"</span> + b.getBalance());\n  }\n} \n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BankAccount</span> </span>{\n  <span class=\"hljs-keyword\">int</span> balance;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> temp = balance + amount;\n    System.out.print(<span class=\"hljs-string\">\"+\"</span>) \n    balance = temp; <span class=\"hljs-comment\">// 임계구역</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">withdraw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> temp = balance - amount; \n    System.out.print(<span class=\"hljs-string\">\"-\"</span>) \n    balance = temp; <span class=\"hljs-comment\">// 임계구역</span>\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getBalance</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> balance;\n  }\n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Parent</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span> </span>{\n  BankAccount b;\n  Parent(BankAccount b) {\n    <span class=\"hljs-keyword\">this</span>.b = b;\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">100</span>; i++)\n    b.deposit(<span class=\"hljs-number\">1000</span>);\n  }\n} \n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Child</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Thread</span> </span>{\n  BankAccount b;\n  Child(BankAccount b) {\n    <span class=\"hljs-keyword\">this</span>.b = b;\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">100</span>; i++)\n    b.withdraw(<span class=\"hljs-number\">1000</span>);\n  }\n}\n</code></pre>\n<h1>임계구역 문제(The Critical-Section Problem)</h1>\n<h2>임계구역(Critical Section)</h2>\n<p>여러 개의 스레드로 구성된 시스템에서 각 스레드가 같이 사용하는 변수, 테이블, 파일을 바꾸는 코드 영역을 임계구역이라고 한다. 예) 은행 계좌 예시에서 balance 값을 바꾸는 코드가 임계구역이다.</p>\n<h2>임계구역 문제 해결방법 - 아래 3가지 다 만족해야한다!</h2>\n<ul>\n<li>Mutual exclusion (상호배타): 오직 한 쓰레드만 진입<br/>예) Parent 스레드가 임계구역 실행 중에는 Child 스레드는 임계구역에 들어갈 수 없다.</li>\n<li>Progress (진행): 진입 결정은 유한 시간 내<br/>예) 임계구역에 어떤 스레드가 먼저 진입할지에 대한 결정은 유한 시간 내에 결정되어야 한다.</li>\n<li>Bounded waiting (유한대기): 어느 쓰레드라도<br/>예) 어느 스레드라도 기다리고 있으면 유한한 시간내에 임계구역에 들어갈 수 있다.</li>\n</ul>\n<h1>세마포 (Semaphore)</h1>\n<p>동기화 문제 해결을 위한 소프트웨어 도구로 <span class=\"clr-note\">정수형 변수 + 두 개의 동작 (P, V)</span>으로 이루어져있다.</p>\n<h2>동작</h2>\n<ul>\n<li>P: Proberen (test) → <strong>acquire()</strong></li>\n<li>V: Verhogen (increment) → <strong>release()</strong></li>\n</ul>\n<h2>구조</h2>\n<ul>\n<li>acquire() : 임계구역 전에 호출하여 value가 조건에 맞으면 <strong>프로세스(or 스레드)를 list(큐)에 넣는다.</strong> 큐에 들어간 프로세스는 다른 프로세스에 의해 release()가 호출될 때까지 Block된다. 즉 임계구역을 실행할 수 없게 된다. (Block이 된다 == Ready Queue에 들어가지 못한다)</li>\n<li>release() : value 조건에 맞으면 list에서 <strong>프로세스를 꺼내서 깨운다.</strong> 깨운다는 것은 Ready Queue(cpu 서비스 기다리는 줄)에 넣는 다는 것을 의미한다.</li>\n</ul>\n<pre><code class=\"language-java\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Semaphore</span> </span>{\n  <span class=\"hljs-keyword\">int</span> value; <span class=\"hljs-comment\">// number of permits</span>\n\n  Semaphore(<span class=\"hljs-keyword\">int</span> value) {\n  ... }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">acquire</span><span class=\"hljs-params\">()</span> </span>{\n    value--;\n    <span class=\"hljs-keyword\">if</span> (value &lt; <span class=\"hljs-number\">0</span>) {\n      add <span class=\"hljs-keyword\">this</span> process/thread to list;\n      block;\n    }\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">release</span><span class=\"hljs-params\">()</span> </span>{\n    value++;\n    <span class=\"hljs-keyword\">if</span> (value &lt;= <span class=\"hljs-number\">0</span>) {\n      remove a process P from list;\n      wakeup P;\n    }\n  }\n}\n\n</code></pre>\n<h2>세마포의 사용 - 상호 배타(Mutual exclusion)</h2>\n<p>sem.value = 1로 두어 임계구역에는 프로세스 한 개만 들어갈 수 있도록 한다.</p>\n<p><img src=\"/assets/images/2020-01-06-img/1.png\" alt=\"process tree\"><br/></p>\n<p>아래 코드는 은행 계좌 예시의 BankAccount 클래스를 수정한 것으로 임계구역 문제를 해결한다.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.Semaphore;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BankAccount</span> </span>{\n  <span class=\"hljs-keyword\">int</span> balance;\n  Semaphore sem;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BankAccount</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.sem = <span class=\"hljs-keyword\">new</span> Semaphore(<span class=\"hljs-number\">1</span>)\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      sem.acquire()\n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    \n    <span class=\"hljs-keyword\">int</span> temp = balance + amount;\n    System.out.print(<span class=\"hljs-string\">\"+\"</span>) \n    balance = temp;\n    sem.release()\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">withdraw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      sem.acquire()\n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    <span class=\"hljs-keyword\">int</span> temp = balance - amount; \n    System.out.print(<span class=\"hljs-string\">\"-\"</span>) \n    balance = temp;\n    sem.release()\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getBalance</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> balance;\n  }\n}\n\n</code></pre>\n<ol>\n<li>Parent 프로세스가 deposit()을 호출하면 acquire() 메소드가 실행된다. 이는 value를 0으로 만드나 조건이 false라 바로 빠져나와 임계구역을 실행한다.</li>\n<li>문맥 전환에 의해 Child 프로세스의 witdhdraw()가 호출되면 acquire()이 호출된다. value를 -1로 만들어 조건이 true가 되어 Child 프로세스는 큐에 들어가고 Block 된다. 즉, 임계구역을 못 간다.</li>\n<li>Parent 프로세스가 임계구역 실행을 완료한 후 release()를 호출하면 큐의 프로세스 하나를 뺀다. 즉, Child 프로세스를 깨워 Ready Queue로 보낸다.</li>\n</ol>\n<h2>세마포의 사용 - 프로세스 실행 순서 제어(Ordering)</h2>\n<p>CPU 스케줄링 알고리즘에 관련없이 P1에 들어간 S1 코드가 P2의 S2 코드보다 먼저 실행되게 하고 싶을 때? 세마포를 사용하자!</p>\n<p><img src=\"/assets/images/2020-01-06-img/2.png\" alt=\"process tree\"><br/></p>\n<p>항상 입금이 먼저 되게 BankAccount 클래스를 수정해보자.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.Semaphore;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BankAccount</span> </span>{\n  <span class=\"hljs-keyword\">int</span> balance;\n  Semaphore sem;\n  Semaphore sem2;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BankAccount</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.sem = <span class=\"hljs-keyword\">new</span> Semaphore(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">this</span>.sem2 = <span class=\"hljs-keyword\">new</span> Semaphore(<span class=\"hljs-number\">0</span>)\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      sem.acquire()\n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    \n    <span class=\"hljs-keyword\">int</span> temp = balance + amount;\n    System.out.print(<span class=\"hljs-string\">\"+\"</span>) \n    balance = temp;\n    sem.release()\n    sem2.release()\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">withdraw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      sem2.acquire()\n      sem.acquire()      \n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    <span class=\"hljs-keyword\">int</span> temp = balance - amount; \n    System.out.print(<span class=\"hljs-string\">\"-\"</span>) \n    balance = temp;\n    sem.release()\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getBalance</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> balance;\n  }\n}\n\n</code></pre>\n<p>이제 입출금 교대로 되게 BankAccount 클래스를 수정해보자.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.Semaphore;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BankAccount</span> </span>{\n  <span class=\"hljs-keyword\">int</span> balance;\n  Semaphore sem;\n  Semaphore dsem;\n  Semaphore wsem;\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">BankAccount</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">this</span>.sem = <span class=\"hljs-keyword\">new</span> Semaphore(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">this</span>.dsem = <span class=\"hljs-keyword\">new</span> Semaphore(<span class=\"hljs-number\">0</span>);\n    <span class=\"hljs-keyword\">this</span>.wsem = <span class=\"hljs-keyword\">new</span> Semaphore(<span class=\"hljs-number\">0</span>);\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deposit</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      sem.acquire();\n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    \n    <span class=\"hljs-keyword\">int</span> temp = balance + amount;\n    System.out.print(<span class=\"hljs-string\">\"+\"</span>) \n    balance = temp;\n    sem.release();\n    wsem.release();\n    <span class=\"hljs-keyword\">try</span> {\n      dsem.acquire();\n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    \n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">withdraw</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> amount)</span> </span>{\n    <span class=\"hljs-keyword\">try</span> {\n      wsem.acquire();     \n      sem.acquire();    \n    } <span class=\"hljs-keyword\">catch</span>(InterruptedException) {}\n    <span class=\"hljs-keyword\">int</span> temp = balance - amount; \n    System.out.print(<span class=\"hljs-string\">\"-\"</span>) \n    balance = temp;\n    sem.release();\n    dsem.release();\n  }\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">getBalance</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">return</span> balance;\n  }\n}\n\n</code></pre>\n","updatedAt":"2020-01-22T18:18:24.737Z"}