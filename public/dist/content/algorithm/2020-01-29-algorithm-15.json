{"layout":"post-content","title":"백준 - 17142 연구소3(C++)","date":"2020-01-29T00:00:00.000Z","categories":["algorithm"],"body":"<h2>입력 받기</h2>\n<ul>\n<li>연구소 상태는 N x N 이니깐 int A[N][N] 형태로 입력을 저장해야겠다.</li>\n<li>입력을 받을 때, 선택 가능한 바이러스들(값이 2인)의 row, col 값을 따로 저장할 필요가 있겠네. pair&lt;int, int&gt; V[10] 형태로 저장해야겠다. 바이러스 개수는 최대 10이니깐 배열의 크기는 10으로 하자.</li>\n<li>퍼트릴 수 있는 빈 칸의 개수도 카운트 해놓자. 그래야 모든 빈칸에 바이러스를 퍼트렸는 지 알 수 있으니깐.</li>\n<li>아! 퍼트린 후 연구소 상태를 원상 복귀해야하니깐 int TMP[N][N] 형태의 2차원 배열을 만들어놔야지.</li>\n</ul>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;queue&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;limits&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> A[<span class=\"hljs-number\">50</span>][<span class=\"hljs-number\">50</span>]; <span class=\"hljs-comment\">// 연구소</span>\n  <span class=\"hljs-keyword\">int</span> TMP[<span class=\"hljs-number\">50</span>][<span class=\"hljs-number\">50</span>]; <span class=\"hljs-comment\">// 연구소 결과 처리용</span>\n  <span class=\"hljs-keyword\">int</span> N, M; <span class=\"hljs-comment\">// N: 연구소 크기, M: 활성화할 바이러스 수</span>\n  <span class=\"hljs-keyword\">int</span> tcnt = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 연구소 빈칸(0)의 개수</span>\n  pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; V[<span class=\"hljs-number\">10</span>]; <span class=\"hljs-comment\">// 연구소 선택 가능한 바이러스(2)의 위치</span>\n  <span class=\"hljs-keyword\">int</span> vcnt = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// V 배열을 위한 인덱스</span>\n  <span class=\"hljs-keyword\">int</span> prow[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>}; <span class=\"hljs-comment\">// 상하좌우 확산 시 사용 row</span>\n  <span class=\"hljs-keyword\">int</span> pcol[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>}; <span class=\"hljs-comment\">// 상하좌우 확산 시 사용 col</span>\n    \n  <span class=\"hljs-comment\">// 입력받기</span>\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d %d\"</span>, &amp;N, &amp;M);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;A[i][j]);\n      TMP[i][j] = A[i][j];\n      <span class=\"hljs-keyword\">if</span> (A[i][j] == <span class=\"hljs-number\">2</span>) V[vcnt++] = make_pair(i, j);\n      <span class=\"hljs-keyword\">if</span> (A[i][j] == <span class=\"hljs-number\">0</span>) tcnt++;\n    }\n  }\n}\n</code></pre>\n<h2>활성화할 바이러스 선택하기</h2>\n<ul>\n<li>DFS로 할 수도 있지만 비트 마스크로 풀어봐야지</li>\n<li>만약 5개의 바이러스 중 3개를 선택해야한다면 범위는 00111 ~ 11100 이다.</li>\n<li>근데 사실, DFS로 하는 게 코드가 간단해서… DFS가 나을 듯, 비트 마스크로 풀다가 실수를 너무 많이 했다.</li>\n</ul>\n<pre><code class=\"language-cpp\">  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> flag = (<span class=\"hljs-number\">1</span> &lt;&lt; M) - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 시작 플래그, unsigned int는 양수 범위를 가짐</span>\n  <span class=\"hljs-keyword\">int</span> tcc = M;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> fin = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 종료 플래그</span>\n  <span class=\"hljs-comment\">// 종료 플래그 만들기.</span>\n  <span class=\"hljs-keyword\">while</span> (tcc-- &gt; <span class=\"hljs-number\">0</span>) {\n    fin |= (<span class=\"hljs-number\">1</span> &lt;&lt;  (vcnt - <span class=\"hljs-number\">1</span> - tcc));\n  }\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> curflag = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 조작용</span>\n  <span class=\"hljs-keyword\">int</span> fcnt = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">int</span> pos = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">queue</span>&lt;pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; &gt; q;\n  <span class=\"hljs-comment\">// 시작플래그 ~ 종료플래그</span>\n  <span class=\"hljs-keyword\">for</span> (flag; flag&lt;=fin; flag++) {\t\n    curflag = flag;\n    fcnt = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">// 1비트 개수 세기, M개 일때만 코드 진행</span>\n    <span class=\"hljs-keyword\">while</span> (curflag &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (curflag &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>) fcnt++;\n      <span class=\"hljs-keyword\">if</span> (fcnt &gt; M) <span class=\"hljs-keyword\">break</span>;\n      curflag = curflag &gt;&gt; <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (fcnt != M) <span class=\"hljs-keyword\">continue</span>;\n\t\t<span class=\"hljs-comment\">// 이제 고른 바이러스 표시하기</span>\n    curflag = flag;\n    pos = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (curflag &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (curflag &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>) {\n        TMP[V[pos].first][V[pos].second] = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// 바이러스 복제</span>\n        <span class=\"hljs-comment\">// 큐에 선택한 바이러스 넣기 -&gt; 퍼트리기에서 BFS로 사용할 예정</span>\n        q.push(make_pair(V[pos].first, V[pos].second));\n      }\n      pos++;\n      curflag = curflag &gt;&gt; <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-comment\">// ...바이러스 퍼트리기가 이어진다.</span>\n  }\n</code></pre>\n<h2>바이러스 퍼트리기</h2>\n<ul>\n<li>만약 백준에서 제출 시 100%에서 틀린다면 비활성화 바이러스도 시간 체크했는 지 살펴봐야한다.\n여기서 엄청 헤매서 시간 다 잡아먹었다ㅠㅠ</li>\n<li>쉽게 설명하자면 대부분 BFS로 q가 빌 때까지 반복을 돌릴텐데 만약 이미 빈칸(0)에는 다 전파했는 데 q에 비활성화(선택 못 받은 바이러스)가 있다면? 이 상황을 이해한다면 오류를 잡을 수 있을 거다.</li>\n</ul>\n<blockquote>\n<p>반례가 있어야 이해가 되겠죠?<br>\n5 1<br>\n1 1 1 1 1<br>\n1 1 1 1 1<br>\n1 1 1 1 1<br>\n2 0 0 2 0<br>\n1 1 1 1 1<br>\nanswer : 2</p>\n</blockquote>\n<ul>\n<li>사실 q에 시간 체크용 값도 넣어버려서… 복잡하게 풀어버린 것 같다…</li>\n<li>더 간단히 풀 수 있을 듯…</li>\n</ul>\n<pre><code class=\"language-cpp\">  <span class=\"hljs-comment\">// ..위에는 바이러스 선택하기</span>\n  <span class=\"hljs-comment\">// 시간 체크용, 현재 q에는 선택된 바이러스가 있고 얘는 0초이므로 0을 넣어준다. -1은 구분 용</span>\n  q.push(make_pair(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>));\n  spread = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 퍼진 바이러스</span>\n  time = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 시간</span>\n  stopflag = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 빈칸에 다 퍼트렸으면 true로 바꿀거다.</span>\n  <span class=\"hljs-keyword\">while</span> (!q.empty()) {\n    <span class=\"hljs-comment\">// c++에서 q.pop()은 void 메소드라서 q.front()로 값 가져온다.</span>\n    pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; po = q.front(); \n    q.pop();\n    <span class=\"hljs-keyword\">if</span> (po.first &gt;= <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// 퍼트린 칸이면</span>\n      <span class=\"hljs-keyword\">if</span> (A[po.first][po.second] == <span class=\"hljs-number\">0</span>) spread++; <span class=\"hljs-comment\">// 해당 칸이 원래 빈칸(0)이면 값 증가</span>\n      <span class=\"hljs-keyword\">if</span> (spread == tcnt) stopflag = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 빈칸에 다 퍼트리면 시간체크용 값 나올 때 스탑하려고</span>\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++) { <span class=\"hljs-comment\">// 상하좌우 처리</span>\n        nextrow = po.first + prow[i];\n        nextcol = po.second + pcol[i];\n        <span class=\"hljs-keyword\">if</span> (nextrow &lt; <span class=\"hljs-number\">0</span> || nextrow &gt;= N || nextcol &lt; <span class=\"hljs-number\">0</span> || nextcol &gt;= N) <span class=\"hljs-keyword\">continue</span>; <span class=\"hljs-comment\">// 범위 밖</span>\n        <span class=\"hljs-keyword\">if</span> (TMP[nextrow][nextcol] == <span class=\"hljs-number\">-1</span> || TMP[nextrow][nextcol] == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">continue</span>;\n        q.push(make_pair(nextrow, nextcol)); <span class=\"hljs-comment\">// 큐에 넣자넣자!</span>\n        TMP[nextrow][nextcol] = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// 퍼트렸다는(방문했다는) 표시!</span>\n      }\n    } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// 시간체크용</span>\n      time = po.second;\n      <span class=\"hljs-keyword\">if</span> (!q.empty()) q.push(make_pair(<span class=\"hljs-number\">-1</span>, po.second + <span class=\"hljs-number\">1</span>));\n      <span class=\"hljs-keyword\">if</span> (stopflag) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 이미 모든 빈칸에 퍼트렸으면 나오자!</span>\n    }\n  }\n  <span class=\"hljs-keyword\">while</span> (!q.empty()) <span class=\"hljs-comment\">// 위 반복에서 stopflag에 의해 중간에 빠져나왔을 경우를 대비해서</span>\n  {\n    q.pop();\n  }\n  <span class=\"hljs-comment\">// 시간 넣자!!</span>\n  <span class=\"hljs-keyword\">if</span> (spread == tcnt &amp;&amp; ans &gt; time) ans = time;\n</code></pre>\n<h2>원상복귀</h2>\n<ul>\n<li>TMP는 또 써야하니깐!</li>\n</ul>\n<pre><code class=\"language-cpp\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n    TMP[i][j] = A[i][j];\n  }\n}\n</code></pre>\n<h2>전체 코드</h2>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;queue&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;limits&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n\n<span class=\"hljs-keyword\">int</span> A[<span class=\"hljs-number\">50</span>][<span class=\"hljs-number\">50</span>];\n<span class=\"hljs-keyword\">int</span> TMP[<span class=\"hljs-number\">50</span>][<span class=\"hljs-number\">50</span>];\n<span class=\"hljs-keyword\">int</span> N, M;\n<span class=\"hljs-keyword\">int</span> vcnt = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">int</span> tcnt = <span class=\"hljs-number\">0</span>;\npair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; V[<span class=\"hljs-number\">10</span>];\n<span class=\"hljs-keyword\">int</span> prow[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};\n<span class=\"hljs-keyword\">int</span> pcol[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// 입력받기</span>\n  <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d %d\"</span>, &amp;N, &amp;M);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;A[i][j]);\n      TMP[i][j] = A[i][j];\n      <span class=\"hljs-keyword\">if</span> (A[i][j] == <span class=\"hljs-number\">2</span>) V[vcnt++] = make_pair(i, j);\n      <span class=\"hljs-keyword\">if</span> (A[i][j] == <span class=\"hljs-number\">0</span>) tcnt++;\n    }\n  }\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> flag = (<span class=\"hljs-number\">1</span> &lt;&lt; M) - <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 시작 플래그, unsigned int는 양수 범위를 가짐</span>\n  <span class=\"hljs-keyword\">int</span> tcc = M;\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> fin = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 종료 플래그</span>\n  <span class=\"hljs-comment\">// 종료 플래그 만들기.</span>\n  <span class=\"hljs-keyword\">while</span> (tcc-- &gt; <span class=\"hljs-number\">0</span>) {\n    fin |= (<span class=\"hljs-number\">1</span> &lt;&lt;  (vcnt - <span class=\"hljs-number\">1</span> - tcc));\n  }\n  <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> curflag = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 조작용</span>\n  <span class=\"hljs-keyword\">int</span> fcnt = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">int</span> pos = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">int</span> nextrow = <span class=\"hljs-number\">0</span>, nextcol = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-built_in\">queue</span>&lt;pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; &gt; q;\n  <span class=\"hljs-keyword\">int</span> spread = <span class=\"hljs-number\">0</span>, time = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">int</span> ans = numeric_limits&lt;<span class=\"hljs-keyword\">int</span>&gt;::max();\n  <span class=\"hljs-keyword\">bool</span> stopflag = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-comment\">// 시작플래그 ~ 종료플래그</span>\n  <span class=\"hljs-keyword\">for</span> (flag; flag&lt;=fin; flag++) {\t\n    curflag = flag;\n    fcnt = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">// 1비트 개수 세기, M개 일때만 코드 진행</span>\n    <span class=\"hljs-keyword\">while</span> (curflag &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (curflag &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>) fcnt++;\n      <span class=\"hljs-keyword\">if</span> (fcnt &gt; M) <span class=\"hljs-keyword\">break</span>;\n      curflag = curflag &gt;&gt; <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">if</span> (fcnt != M) <span class=\"hljs-keyword\">continue</span>;\n\t\t<span class=\"hljs-comment\">// 이제 고른 바이러스 표시하기</span>\n    curflag = flag;\n    pos = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (curflag &gt; <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">if</span> (curflag &amp; <span class=\"hljs-number\">1</span> == <span class=\"hljs-number\">1</span>) {\n        TMP[V[pos].first][V[pos].second] = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// 바이러스 복제</span>\n        <span class=\"hljs-comment\">// 큐에 선택한 바이러스 넣기 -&gt; 퍼트리기에서 BFS로 사용할 예정</span>\n        q.push(make_pair(V[pos].first, V[pos].second));\n      }\n      pos++;\n      curflag = curflag &gt;&gt; <span class=\"hljs-number\">1</span>;\n    }\n    q.push(make_pair(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">0</span>));\n    spread = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 퍼진 바이러스</span>\n    time = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 시간</span>\n    stopflag = <span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 빈칸에 다 퍼트렸으면 true로 바꿀거다.</span>\n    <span class=\"hljs-keyword\">while</span> (!q.empty()) {\n      <span class=\"hljs-comment\">// c++에서 q.pop()은 void 메소드라서 q.front()로 값 가져온다.</span>\n      pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; po = q.front(); \n      q.pop();\n      <span class=\"hljs-keyword\">if</span> (po.first &gt;= <span class=\"hljs-number\">0</span>) { <span class=\"hljs-comment\">// 퍼트린 칸이면</span>\n        <span class=\"hljs-keyword\">if</span> (A[po.first][po.second] == <span class=\"hljs-number\">0</span>) spread++; <span class=\"hljs-comment\">// 해당 칸이 원래 빈칸(0)이면 값 증가</span>\n        <span class=\"hljs-keyword\">if</span> (spread == tcnt) stopflag = <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 빈칸에 다 퍼트리면 시간체크용 값 나올 때 스탑하려고</span>\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++) { <span class=\"hljs-comment\">// 상하좌우 처리</span>\n          nextrow = po.first + prow[i];\n          nextcol = po.second + pcol[i];\n          <span class=\"hljs-keyword\">if</span> (nextrow &lt; <span class=\"hljs-number\">0</span> || nextrow &gt;= N || nextcol &lt; <span class=\"hljs-number\">0</span> || nextcol &gt;= N) <span class=\"hljs-keyword\">continue</span>; <span class=\"hljs-comment\">// 범위 밖</span>\n          <span class=\"hljs-keyword\">if</span> (TMP[nextrow][nextcol] == <span class=\"hljs-number\">-1</span> || TMP[nextrow][nextcol] == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">continue</span>;\n          q.push(make_pair(nextrow, nextcol)); <span class=\"hljs-comment\">// 큐에 넣자넣자!</span>\n          TMP[nextrow][nextcol] = <span class=\"hljs-number\">-1</span>; <span class=\"hljs-comment\">// 퍼트렸다는(방문했다는) 표시!</span>\n        }\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// 시간체크용</span>\n        time = po.second;\n        <span class=\"hljs-keyword\">if</span> (!q.empty()) q.push(make_pair(<span class=\"hljs-number\">-1</span>, po.second + <span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-keyword\">if</span> (stopflag) <span class=\"hljs-keyword\">break</span>; <span class=\"hljs-comment\">// 이미 모든 빈칸에 퍼트렸으면 나오자!</span>\n      }\n    }\n    <span class=\"hljs-keyword\">while</span> (!q.empty()) <span class=\"hljs-comment\">// 위 반복에서 stopflag에 의해 중간에 빠져나왔을 경우를 대비해서</span>\n    {\n      q.pop();\n    }\n    <span class=\"hljs-comment\">// 시간 넣자!!</span>\n    <span class=\"hljs-keyword\">if</span> (spread == tcnt &amp;&amp; ans &gt; time) ans = time;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n        TMP[i][j] = A[i][j];\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">if</span> (ans == numeric_limits&lt;<span class=\"hljs-keyword\">int</span>&gt;::max()) ans = <span class=\"hljs-number\">-1</span>;\n  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, ans);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","updatedAt":"2020-01-29T08:19:21.899Z"}