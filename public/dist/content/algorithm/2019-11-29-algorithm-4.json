{"layout":"post-content","title":"프로그래머스 2xn 타일링 Javascript","date":"2019-11-29T00:00:00.000Z","categories":["algorithm"],"body":"<h1>문제 설명</h1>\n<p>가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있습니다. 이 직사각형 타일을 이용하여 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일을 채울 때는 다음과 같이 2가지 방법이 있습니다.</p>\n<p>타일을 가로로 배치 하는 경우<br>\n타일을 세로로 배치 하는 경우</p>\n<p>직사각형의 가로의 길이 n이 매개변수로 주어질 때, 이 직사각형을 채우는 방법의 수를 return 하는 solution 함수를 완성해주세요.</p>\n<h1>제한 사항</h1>\n<ul>\n<li>가로의 길이 n은 60,000이하의 자연수 입니다.</li>\n<li>경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return해주세요.</li>\n</ul>\n<h1>풀이</h1>\n<p>문제를 보는 순간 규칙이 있을 거 같다는 생각을 했다.<br>\n근데 그 규칙 찾는 데 한참 걸렸다… ㅠ__ㅠ</p>\n<p>결론부터 말하자면, 이 문제의 점화식은 <strong>DP[N] = DP[N-1][N-2]</strong> 다. 그리고 n이 최대 60000 이므로 재귀를 쓰는 것보다 메모이제이션을 이용하는 게 낫다고 판단했다.</p>\n<p>아래는 점화식 도출 과정이다.</p>\n<ul>\n<li>n = 0, 1개</li>\n<li>n = 1, 1개</li>\n<li>n = 2, 2개 (DP[1] + DP[0])</li>\n<li>n = 3, 3개 (DP[2] + DP[1])</li>\n<li>n = 4, 4개 (DP[3] + DP[2])</li>\n<li>…</li>\n</ul>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> memo = <span class=\"hljs-built_in\">Array</span>(n+<span class=\"hljs-number\">1</span>).fill(<span class=\"hljs-number\">0</span>);\n    memo[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n    memo[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">2</span>; i&lt;n+<span class=\"hljs-number\">1</span>; i++) {\n        memo[i] = (memo[i<span class=\"hljs-number\">-1</span>] + memo[i<span class=\"hljs-number\">-2</span>]) % <span class=\"hljs-number\">1000000007</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> memo[n];    \n}\n</code></pre>\n","updatedAt":"2020-01-22T18:26:22.703Z"}