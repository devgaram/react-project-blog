{"layout":"post-content","title":"프로그래머스 다음 큰 숫자 Javascript","date":"2019-11-29T00:00:00.000Z","categories":["algorithm"],"body":"<h1>문제 설명</h1>\n<p>자연수 n이 주어졌을 때, n의 다음 큰 숫자는 다음과 같이 정의 합니다.</p>\n<ul>\n<li>조건 1. n의 다음 큰 숫자는 n보다 큰 자연수 입니다.</li>\n<li>조건 2. n의 다음 큰 숫자와 n은 2진수로 변환했을 때 1의 갯수가 같습니다.\n*조건 3. n의 다음 큰 숫자는 조건 1, 2를 만족하는 수 중 가장 작은 수 입니다.</li>\n</ul>\n<p>예를 들어서 78(1001110)의 다음 큰 숫자는 83(1010011)입니다.</p>\n<p>자연수 n이 매개변수로 주어질 때, n의 다음 큰 숫자를 return 하는 solution 함수를 완성해주세요.</p>\n<h1>내 풀이</h1>\n<p>2진수 n의 1 비트 갯수와 같은 비트수를 가지는 숫자를 n+1부터 반복을 돌려서 찾으면 된다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> nBit = getBitCount(n);\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-keyword\">if</span> (getBitCount(++n) === nBit) <span class=\"hljs-keyword\">break</span>;\n    }    \n    \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getBitCount</span>(<span class=\"hljs-params\">number</span>) </span>{\n        <span class=\"hljs-keyword\">let</span> bitCount = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">while</span>(number &gt; <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-keyword\">if</span> (number &amp; <span class=\"hljs-number\">1</span> === <span class=\"hljs-number\">1</span>) bitCount++;\n            number = number &gt;&gt;&gt; <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> bitCount;\n    }\n    \n    <span class=\"hljs-keyword\">return</span> n;\n}\n</code></pre>\n<h1>다른 사람 풀이</h1>\n<p>풀고 다른 사람의 풀이를 보니 아이디어는 비슷했으나 비트 수를 세는 방법이 다양했다.</p>\n<ol>\n<li>String.prototype.match() 메서드와 정규 표현식 이용하기</li>\n</ol>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">n</span>) </span>{\n    <span class=\"hljs-comment\">// console.log(n.toString(2).match(/1/g)) : [ '1', '1', '1', '1' ] 배열 형태로 반환    </span>\n    <span class=\"hljs-keyword\">let</span> nBit = n.toString(<span class=\"hljs-number\">2</span>).match(<span class=\"hljs-regexp\">/1/g</span>).length;    \n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) <span class=\"hljs-keyword\">if</span> ((++n).toString(<span class=\"hljs-number\">2</span>).match(<span class=\"hljs-regexp\">/1/g</span>).length === nBit) <span class=\"hljs-keyword\">return</span> n;\n}\n</code></pre>\n","updatedAt":"2020-01-22T18:26:23.101Z"}