{"layout":"post-content","title":"c++로 알고리즘 풀 때 팁들","date":"2020-01-28T00:00:00.000Z","categories":["algorithm"],"body":"<h1># 입출력</h1>\n<p>cin, cout은 느려서 scanf, printf를 사용하는 걸 추천한다.</p>\n<pre><code class=\"language-cpp\"><span class=\"hljs-keyword\">int</span> N, M, K;\n<span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d %d %d\"</span>, &amp;N, &amp;M, &amp;K);\n</code></pre>\n<h1># 2차원 배열</h1>\n<p>1 2 3 4 5 <br/>\n2 3 4 5 6 <br/>\n… 방식의 입력을 받고 싶다면?</p>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX 10</span>\n<span class=\"hljs-keyword\">int</span> A[MAX][MAX];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n      <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d\"</span>, &amp;A[i][j]);\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h2>2차원 deque 입력, 정렬</h2>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> MAX 10</span>\n<span class=\"hljs-built_in\">deque</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; T[MAX][MAX];\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> x, y, age;\n\n  <span class=\"hljs-comment\">// 입력</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;M; i++) {\n    <span class=\"hljs-built_in\">scanf</span>(<span class=\"hljs-string\">\"%d %d %d\"</span>, &amp;x, &amp;y, &amp;age);\n    T[--x][--y].push_back(age);\n  }\n\n  <span class=\"hljs-comment\">// 정렬 오름차순</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n      <span class=\"hljs-keyword\">if</span> (T[i][j].size() &gt; <span class=\"hljs-number\">1</span>)\n        sort(T[i][j].begin(), T[i][j].end());\n\t  \n    }\n  }\n\n  <span class=\"hljs-comment\">// 순회</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;N; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;N; j++) {\n      <span class=\"hljs-built_in\">deque</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; &amp;tmp = T[i][j]; <span class=\"hljs-comment\">// 참조로 받기(수정하려면)</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">auto</span> iter=tmp.begin(); iter != tmp.end();) {\n        <span class=\"hljs-keyword\">int</span> &amp;t = *iter;\n        <span class=\"hljs-keyword\">if</span> () <span class=\"hljs-comment\">//삭제X</span>\n          iter++;\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-comment\">//삭제 O</span>\n          iter = tmp.erase(iter); <span class=\"hljs-comment\">//다음 iter 받음</span>\n\t\t  \n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h1>포인터와 참조</h1>\n<pre><code class=\"language-cpp\"><span class=\"hljs-comment\">// 새로운게임2 에서..</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Horse</span> {</span>\n  <span class=\"hljs-keyword\">int</span> row, col, dir;\n};\n\n<span class=\"hljs-comment\">// 참조 변수 : 대상을 직접 할당</span>\n<span class=\"hljs-comment\">// 선언과 동시에 초기화해야한다! </span>\n<span class=\"hljs-comment\">// NULL 불가</span>\nHorse &amp;h = horse[<span class=\"hljs-number\">0</span>]; \nh = horse[<span class=\"hljs-number\">1</span>]; <span class=\"hljs-comment\">// 에러!! (대상 변경 불가)</span>\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, h.row);\n\n<span class=\"hljs-comment\">// 포인터 변수 : 주소값 할당</span>\nHorse *h = &amp;horse[<span class=\"hljs-number\">0</span>]; \nh = &amp;horse[<span class=\"hljs-number\">1</span>];  <span class=\"hljs-comment\">// 대상 변경 가능!</span>\nHorse *h = <span class=\"hljs-literal\">NULL</span>; <span class=\"hljs-comment\">// NULL 가능</span>\n\n<span class=\"hljs-keyword\">if</span> (h) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, h-&gt;row);\n<span class=\"hljs-comment\">// 또는</span>\n<span class=\"hljs-keyword\">if</span> (h) <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%d\"</span>, (*h).row);\n</code></pre>\n<h1>배열 초기화할 때, memset 함수 쓰자!</h1>\n<ul>\n<li>for문보다 더 빠른 속도가 나올 수 있다.</li>\n<li>특정 범위에 있는 <strong>연속된 메모리</strong>에 값을 지정하고 싶을 때 쓰자!</li>\n<li>cstring 헤더</li>\n</ul>\n<pre><code class=\"language-cpp\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span>* <span class=\"hljs-title\">memset</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *ptr, <span class=\"hljs-keyword\">int</span> value, <span class=\"hljs-keyword\">size_t</span> num)</span></span>;\n<span class=\"hljs-comment\">/*\nptr : 메모리 시작 포인터(주소) =&gt; 배열 이름\nvalue: 채울 값 =&gt; 값\nnum: 채우고자 하는 바이트 수(메모리 크기) =&gt; sizeof(배열이름)\n*/</span>\n</code></pre>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> C[<span class=\"hljs-number\">21</span>][<span class=\"hljs-number\">21</span>];\n  <span class=\"hljs-built_in\">memset</span>(C, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(C)); \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h1>구조체 멤버 내용 복사하고 싶으면? memcpy를 쓰자</h1>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Horse</span> {</span>\n  <span class=\"hljs-keyword\">int</span> row, col, dir;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  Horse h1, h2;\n  h1.row = <span class=\"hljs-number\">1</span>;\n  h1.col = <span class=\"hljs-number\">2</span>;\n  h1.dir = <span class=\"hljs-number\">3</span>\n\n  <span class=\"hljs-built_in\">memcpy</span>(&amp;h2, &amp;h1, <span class=\"hljs-keyword\">sizeof</span>(Horse)); <span class=\"hljs-comment\">// Horse 구조체 크기만큼 h1 내용을 h2에 복사</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h2>동적 할당된 경우는?</h2>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstring&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Horse</span> {</span>\n  <span class=\"hljs-keyword\">int</span> row, col, dir;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  Horse *h1 = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Horse));\n  Horse *h2= <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Horse));\n  h1-&gt;row = <span class=\"hljs-number\">1</span>;\n  h1-&gt;col = <span class=\"hljs-number\">2</span>;\n  h1-&gt;dir = <span class=\"hljs-number\">3</span>\n\n  <span class=\"hljs-built_in\">memcpy</span>(h2, h1, <span class=\"hljs-keyword\">sizeof</span>(Horse)); <span class=\"hljs-comment\">// Horse 구조체 크기만큼 h1 내용을 h2에 복사</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h2>또 다른 예</h2>\n<pre><code class=\"language-cpp\">Horse h1;\nHorse *h2= <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-keyword\">sizeof</span>(Horse));\n\n<span class=\"hljs-built_in\">memcpy</span>(h2, &amp;h1, <span class=\"hljs-keyword\">sizeof</span>(Horse));    <span class=\"hljs-comment\">// 구조체 변수에서 동적 메모리로 복사</span>\n</code></pre>\n","updatedAt":"2020-01-31T06:16:46.815Z"}