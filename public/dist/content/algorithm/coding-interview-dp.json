{"title":"알고리즘 개념 잡자 5탄 - 재귀와 동적 프로그래밍","date":"2020-01-09T00:00:00.000Z","tags":["coding-interview","data-structure"],"category":["algorithm"],"body":"<blockquote>\n<p>참고 <br/></p>\n<ul>\n<li><a href=\"https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=115116545\">코딩 인터뷰 완전분석</a> 재귀와 동적 프로그래밍</li>\n<li><a href=\"https://www.geeksforgeeks.org/overlapping-subproblems-property-in-dynamic-programming-dp-1/\">Geeksforgeeks 바로가기</a></li>\n</ul>\n</blockquote>\n<h1>동적 프로그래밍</h1>\n<ul>\n<li>주어진 문제를 부분 문제로 나눠 값을 계산하는 것</li>\n<li>중복되는 계산을 막기 위해 부분 문제의 결과 값을 저장함 - 메모이제이션(Memoization)과 타뷸레이션(Tabulation)</li>\n</ul>\n<h2>메모이제이션(Memoization)과 타뷸레이션(Tabulation)</h2>\n<ul>\n<li>메모이제이션 : 하향식 접근법 (Top Down) - 재귀적\n<ul>\n<li>테이블을 만들고 NIL(예, -1) 값을 넣음</li>\n<li>서브 문제의 결과값을 구할 때, 먼저 테이블 검색</li>\n<li>계산된 값이 있으면 얘를 리턴</li>\n<li>NIL이면 계산 실행하여 계산 결과를 테이블에 저장</li>\n<li>요구가 있을 때 채워지므로 테이블에 데이터가 다 채워지지 않을 수도 있음</li>\n</ul>\n</li>\n<li>타뷸레이션 : 상향식 접근법 (Bottom Up) - 순환적\n<ul>\n<li>테이블의 마지막 요소를 반환하는 구조</li>\n<li>첫번째부터 전체가 채워지는</li>\n</ul>\n</li>\n</ul>\n<h2>DP의 2가지 속성</h2>\n<p>모든 DP 문제는 Overlapping subproblems 속성을 만족하고 대부분의 클래식 DP 문제는 Optimal Substructure 속성을 만족한다.</p>\n<p><strong>1. overlapping subproblems</strong> <br/><br/></p>\n<ul>\n<li>부분 문제들이 공통으로 겹치는 부분이 있는 지?<br/></li>\n</ul>\n<blockquote>\n<p><span class=\"clr-grey\">우리가 메모이제이션이나 타뷸레이션을 사용하는 이유는 부분 문제의 결과값을 저장해놔서 나중에 이를 활용하려고 사용하죠. 근데 겹치는 부분 문제가 없으면?? 이게 필요가 없음.</span></p>\n</blockquote>\n<ul>\n<li>동적 프로그래밍과 분할 정복\n<ul>\n<li>문제를 나누는 방식에 차이가 있음 <br/><br/></li>\n<li>피보나치<br/>\n<img src=\"/assets/images/2020-01-10-img/2.png\" alt=\"피보나치\"></li>\n<li>이진탐색 <br/>\n<img src=\"/assets/images/2020-01-10-img/1.png\" alt=\"이진탐색\"></li>\n</ul>\n</li>\n</ul>\n<br/>\n<p><strong>2. Optimal Substructure</strong> <br/></p>\n<ul>\n<li>문제의 답을 부분 문제의 답에서 구할 수 있는 가?</li>\n<li>최단 경로 vs 최장 경로<br/>\n<ul>\n<li>경로안에 무수히 많은 경로가 있을 때, 중간 정점들이 각각 최단이 된다면 이를 모든 이은 경로 또한 최단이 된다. <br/><br/>\n<img src=\"/assets/images/2020-01-10-img/3.gif\" alt=\"경로\">\n<ul>\n<li>q -&gt; t 최단 : q -&gt; r + r -&gt; t</li>\n<li>q -&gt; t 최장 : q -&gt; s -&gt; t -&gt; r + r -&gt; q -&gt; s -&gt; t</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>문제 푸는 방법</h2>\n<p><strong>1. DP 문제인가?</strong></p>\n<ul>\n<li>DP의 2가지 속성으로 판단하기</li>\n</ul>\n<p><strong>2. 상태 찾기</strong></p>\n<ul>\n<li>서브 문제마다 값이 달라지는 변수 찾기</li>\n<li>각 서브 문제를 구별하는 값</li>\n<li>파라미타들</li>\n<li>적을 수록 좋다.</li>\n<li>DP(상태) = 결과값(예, 최고 이익, 경우의 수…)</li>\n</ul>\n<p><strong>3. 재귀 방법 알아내기 == 상태들의 관계 알아내기</strong> <br/></p>\n<ul>\n<li>state(n) = state(n-1) + state(n-3) + state(n-5)</li>\n</ul>\n<p><strong>4. 메모이제이션과 타뷸레이션 쓰기</strong></p>\n<h1>8.1 트리플 스텝</h1>\n<p>어떤 아이가 n개의 계단을 오른다. 한 번에 1계단 오르기도 하고 2계단이나 3계단을 오르기도 한다. 계단을 오르는 방법이 몇 가지가 있는지 계산하는 메서드를 구현하라.</p>\n<ul>\n<li>Step 1 : DP 문제인지 판별하기\n<ul>\n<li>느낌…</li>\n</ul>\n</li>\n<li>Step 2 : 부분 문제마다 값이 달라지는 변수 찾기\n<ul>\n<li>N : 계단의 개수 =&gt; 매개변수</li>\n<li>DP[N] = N을 만족하는 경우의 수</li>\n</ul>\n</li>\n<li>Step 3 : 재귀 방법을 알아내기\n<ul>\n<li>조정할 수 있는 거, 오를 수 있는 계단 개수져</li>\n<li>upStair(n) = (n - 1) || (n - 2) || (n - 3)</li>\n<li>upStair(n) = (n - 1) + (n - 2) + (n - 3)</li>\n</ul>\n</li>\n<li>Step 4 : 메모이제이션, 타뷸레이션</li>\n</ul>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">solution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;&amp; memo)</span> </span>{\n  <span class=\"hljs-keyword\">if</span> (n &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">if</span> (n == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">if</span> (memo[n] &gt; <span class=\"hljs-number\">-1</span>) <span class=\"hljs-keyword\">return</span> memo[n];\n  memo[n] = solution(n - <span class=\"hljs-number\">1</span>, memo) + solution (n - <span class=\"hljs-number\">2</span>, memo) + solution (n - <span class=\"hljs-number\">3</span>, memo);\n  <span class=\"hljs-keyword\">return</span> memo[n];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">solution_BU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>{\n  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; dp(n+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>);\n  dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n  dp[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\n  dp[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">3</span>; i&lt;=n; i++) {\n    dp[i] = dp[i<span class=\"hljs-number\">-1</span>] + dp[i<span class=\"hljs-number\">-2</span>] + dp[i<span class=\"hljs-number\">-3</span>];\n  }\n  <span class=\"hljs-keyword\">return</span> dp[n];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span>{\n  <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; memo(n+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">-1</span>);\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; solution(n, memo) &lt;&lt; <span class=\"hljs-string\">\",\"</span>;\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; solution_BU(n) &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h1>8.11 코인</h1>\n<p>쿼터(25센트), 다임(10센트), 니켈(5센트), 페니(1센트)의 네 가지 동전이 무한히 주어졌을 때, n센트를 표현하는 모든 방법의 수를 계산하는 코드를 작성하라</p>\n<ul>\n<li>\n<p>Step 1 : DP 문제인지 판별하기</p>\n<ul>\n<li>10원 방법의 수는 5원 방법에 + 5를 더하는 것…</li>\n<li>느낌…</li>\n</ul>\n</li>\n<li>\n<p>Step 2 : 부분 문제마다 값이 달라지는 변수 찾기</p>\n<ul>\n<li>부분 문제는 1원일 때 방법의 수… 2원일 때 방법의 수…3원일 때…N원일 때 방법의 수</li>\n<li>N : 구할 센트, =&gt; 매개변수, 상태값</li>\n<li>D[N] = 방법의 수</li>\n</ul>\n</li>\n<li>\n<p>Step 3 : 재귀 방법을 알아내기**</p>\n<ul>\n<li>재귀의 방법을 조정할 수 있는 값은? 동전의 가치 (25, 10, 5, 1)</li>\n<li>D(n) = D(n - 25) + D(n - 10) + D(n - 5) + D(n - 1)</li>\n</ul>\n</li>\n<li>\n<p>Step 4 : 메모이제이션, 타뷸레이션</p>\n</li>\n<li>\n<p>10센트 만들기 (D[0] = 1)</p>\n<ul>\n<li>25센트로 : 0 0 0 0 0 0 0 0 0 0</li>\n<li>10센트로 : 0 0 0 0 0 0 0 0 0 1</li>\n<li>5센트로  : 0 0 0 0 1 0 0 0 0 2</li>\n<li>1센트로  : 1 1 1 1 2 2 2 2 2 4</li>\n</ul>\n</li>\n</ul>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">int</span> coin[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">1</span>};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">solution</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-keyword\">int</span> index, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt;&amp; memo)</span> </span>{\n  <span class=\"hljs-keyword\">if</span> (index &gt;= <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">if</span> (memo[n][index] &gt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> memo[n][index];\n  <span class=\"hljs-keyword\">int</span> answer = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i * coin[index] &lt;= n; i++) {\n    answer += solution(n - i * coin[index], index + <span class=\"hljs-number\">1</span>, memo);\n  }\n  \n  memo[n][index] = answer;\n  <span class=\"hljs-keyword\">return</span> memo[n][index];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">solution_BU</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> n)</span> </span>{\n  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; dp(n+<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>);\n  dp[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">1</span>; j&lt;=n; j++) {\n      <span class=\"hljs-keyword\">if</span> (j - coin[i] &gt;= <span class=\"hljs-number\">0</span>) dp[j] += dp[j-coin[i]]; \n    }\n  }\n  <span class=\"hljs-keyword\">return</span> dp[n];\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-number\">10</span>;\n  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt; memo(n + <span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">0</span>));\n  <span class=\"hljs-keyword\">int</span> answer = solution(n, <span class=\"hljs-number\">0</span>, memo);\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; answer &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-keyword\">int</span> answer_2 = solution_BU(n);\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; answer &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h1>8.7 중복 없는 순열</h1>\n<p>문자열이 주어졌을 때 모든 경우의 순열을 계산하는 메서드를 작성하라. 단, 문자는 중복되어 나타날 수 없다.</p>\n<h1>8.9 괄호</h1>\n<p>n-쌍의 괄호로 만들 수 있는 모든 합당한(괄호가 적절히 열리고 닫힌) 조합을 출력하는 알고리즘을 구현하라</p>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">fnc</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">string</span> result, <span class=\"hljs-keyword\">int</span> cur, <span class=\"hljs-keyword\">int</span> dep, <span class=\"hljs-keyword\">int</span> n, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&amp; answer)</span> </span>{\n  <span class=\"hljs-keyword\">if</span> (cur &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">if</span> (cur &gt; <span class=\"hljs-number\">0</span> &amp;&amp; n - dep &lt; cur) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">if</span> (cur == <span class=\"hljs-number\">0</span> &amp;&amp; dep == n) {\n    answer.push_back(result);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  fnc(result + <span class=\"hljs-string\">\"(\"</span>, cur + <span class=\"hljs-number\">1</span>, dep + <span class=\"hljs-number\">1</span>, n, answer);\n  fnc(result + <span class=\"hljs-string\">\")\"</span>, cur - <span class=\"hljs-number\">1</span>, dep + <span class=\"hljs-number\">1</span>, n, answer);\n}\n\n<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; solution(<span class=\"hljs-keyword\">int</span> n) {    \n    <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; answer;\n    fnc(<span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, n*<span class=\"hljs-number\">2</span>, answer); \n    <span class=\"hljs-keyword\">return</span> answer;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">solution_2</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> leftRem, <span class=\"hljs-keyword\">int</span> rightRem, <span class=\"hljs-keyword\">int</span> index, <span class=\"hljs-keyword\">char</span> *str, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;&amp; answer)</span> </span>{\n  <span class=\"hljs-keyword\">if</span> (leftRem &lt; <span class=\"hljs-number\">0</span> || leftRem &gt; rightRem) <span class=\"hljs-keyword\">return</span>;\n  <span class=\"hljs-keyword\">if</span> (leftRem == <span class=\"hljs-number\">0</span> &amp;&amp; rightRem == <span class=\"hljs-number\">0</span>) {\n    answer.push_back(str);\n    <span class=\"hljs-keyword\">return</span>;\n  }\n  str[index] = <span class=\"hljs-string\">'('</span>;\n  solution_2(leftRem - <span class=\"hljs-number\">1</span>, rightRem, index+<span class=\"hljs-number\">1</span>, str, answer);\n\n  str[index] = <span class=\"hljs-string\">')'</span>;\n  solution_2(leftRem, rightRem - <span class=\"hljs-number\">1</span>, index + <span class=\"hljs-number\">1</span>, str, answer);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> n;\n  <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"input:\"</span>;\n  <span class=\"hljs-built_in\">cin</span> &gt;&gt; n;\n  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; answer = solution(n);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;answer.size(); i++) {\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; answer[i] &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n  }\n  <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">string</span>&gt; answer2;\n  <span class=\"hljs-keyword\">char</span> str[n*<span class=\"hljs-number\">2</span>];\n  solution_2(n, n, <span class=\"hljs-number\">0</span>, str, answer2);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;answer2.size(); i++) {\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; answer2[i] &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n  }\n  \n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n</code></pre>\n<h1>8.10 영역 칠하기</h1>\n<p>화면(색이 칠해진 이차원 배열), 화면상의 한 지점, 새로운 색상이 주어졌을 때, 주어진 지점과 색이 같은 주변 영역을 새로운 색상으로 다시 칠하라</p>\n<ul>\n<li>BFS</li>\n</ul>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;queue&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">int</span> row[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>};\n<span class=\"hljs-keyword\">int</span> col[<span class=\"hljs-number\">4</span>] = {<span class=\"hljs-number\">-1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">solution</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt;&amp; screen, pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt;&amp; point, <span class=\"hljs-keyword\">int</span> newColor)</span> </span>{\n  \n  <span class=\"hljs-built_in\">queue</span>&lt;pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; &gt; q;\n  <span class=\"hljs-keyword\">int</span> next_row, next_col;\n  <span class=\"hljs-keyword\">int</span> pre_color = screen[point.first][point.second];\n  q.push(point);  \n  <span class=\"hljs-keyword\">while</span> (!q.empty()) {\n    pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; pop = q.front();\n    screen[pop.first][pop.second] = newColor;\n    q.pop();\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">4</span>; i++) {\n      next_row = pop.first + row[i];\n      next_col = pop.second + col[i];\n      <span class=\"hljs-keyword\">if</span> (next_row &lt; <span class=\"hljs-number\">0</span> || next_col &lt; <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">continue</span>;\n      <span class=\"hljs-keyword\">if</span> (next_row &gt;= screen.size() || next_col &gt;= screen[<span class=\"hljs-number\">0</span>].size()) <span class=\"hljs-keyword\">continue</span>;\n      <span class=\"hljs-keyword\">if</span> (screen[next_row][next_col] == pre_color) {\n        q.push(make_pair(next_row, next_col));\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-comment\">// vector&lt;vector&lt;int&gt; &gt; screen({</span>\n  <span class=\"hljs-comment\">//   vector&lt;int&gt;({1, 1, 2, 3}),</span>\n  <span class=\"hljs-comment\">//   vector&lt;int&gt;({2, 1, 2, 3}),</span>\n  <span class=\"hljs-comment\">//   vector&lt;int&gt;({1, 1, 2, 2}),</span>\n  <span class=\"hljs-comment\">//   vector&lt;int&gt;({2, 2, 2, 1})</span>\n  <span class=\"hljs-comment\">// });</span>\n  <span class=\"hljs-comment\">/*\n  1 2 2 3\n  2 1 2 3\n  1 1 2 2\n  2 2 2 1\n  */</span>\n <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt; &gt; screen(<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">vector</span>&lt;<span class=\"hljs-keyword\">int</span>&gt;(<span class=\"hljs-number\">4</span>));\n  screen[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n  screen[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">3</span>;\n\n  screen[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\n  screen[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">3</span>;\n  \n  screen[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n  screen[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;\n  screen[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">2</span>][<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">2</span>;\n\n  screen[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">2</span>;\n  screen[<span class=\"hljs-number\">3</span>][<span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">1</span>;\n\n  pair&lt;<span class=\"hljs-keyword\">int</span>, <span class=\"hljs-keyword\">int</span>&gt; point = make_pair(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;screen.size(); i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;screen[<span class=\"hljs-number\">0</span>].size(); j++)\n      <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; screen[i][j] &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  }\n  solution(screen, point, <span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">0</span>; i&lt;screen.size(); i++) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j=<span class=\"hljs-number\">0</span>; j&lt;screen[<span class=\"hljs-number\">0</span>].size(); j++)\n      <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; screen[i][j] &lt;&lt; <span class=\"hljs-string\">\" \"</span>;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h1>8.14 불린값 계산</h1>\n<p>0(false), 1(true), &amp;(AND), |(OR), ^(XOR)으로 구성된 불린 표현식과 원하는 계산 결과(불린값)이 주어졌을 때, 표현식에 괄호를 적절하게 추가하여 그 값이 원하는 결과값과 같게 만들 수 있는 모든 경우의 수 출력하기</p>\n<p>출력 예시</p>\n<ul>\n<li>\n<p>countEval(“1^0|0|1”, false) -&gt; 2개</p>\n</li>\n<li>\n<p>countEval(“0&amp;0&amp;0&amp;1^1|0”, true) -&gt; 10개</p>\n</li>\n<li>\n<p>Step 1 : DP 문제인지 판별하기</p>\n<ul>\n<li>뭔가… 적절하게 조합해서 모든 경우 구하는 거라서… dp같네…?</li>\n</ul>\n</li>\n<li>\n<p>Step 2 : 부분 문제마다 값이 달라지는 변수 찾기</p>\n<ul>\n<li>음… 전체 수식을 쪼개니깐 수식이 부분문제마다 달라지넵, 매개변수로 쪼개진 수식을 보내야겠댜~</li>\n</ul>\n</li>\n<li>\n<p>Step 3 : 재귀 방법을 알아내기**</p>\n<ul>\n<li>괄호를 추가한다라…</li>\n<li>1^0|0|1 예시로 보면…</li>\n<li>1 ^ (0|0|1) 처럼 괄호를 추가하고 싶다는 건데…</li>\n<li>그럼 ^ 같은 표현식을 기준으로 왼쪽 오른쪽 나눠어…</li>\n<li>D[수식] = D[왼쪽 수식] * D[오른쪽 수식]</li>\n<li>서로 연관있으니깐 *곱하기</li>\n<li>표현식은 index 1, 3, 5, 7 …에 위치</li>\n</ul>\n</li>\n<li>\n<p>Step 4 : 메모이제이션, 타뷸레이션</p>\n</li>\n</ul>\n<p>1       ^  0|0|1<br>\n1^0     |    0|1<br>\n1^0|0   |   1</p>\n<pre><code class=\"language-cpp\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;map&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">fnc</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> <span class=\"hljs-built_in\">exp</span>, <span class=\"hljs-keyword\">bool</span> r, <span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">int</span>&gt;&amp; memo)</span> </span>{  \n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">exp</span>.length() == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">exp</span>[<span class=\"hljs-number\">0</span>] == (r ? <span class=\"hljs-string\">'1'</span> : <span class=\"hljs-string\">'0'</span>) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">if</span> (memo.count(<span class=\"hljs-built_in\">exp</span> + (r ? <span class=\"hljs-string\">\"-1\"</span> : <span class=\"hljs-string\">\"-0\"</span>)) == <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> memo[<span class=\"hljs-built_in\">exp</span> + (r ? <span class=\"hljs-string\">\"-1\"</span> : <span class=\"hljs-string\">\"-0\"</span>)];\n  <span class=\"hljs-keyword\">int</span> sum = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i=<span class=\"hljs-number\">1</span>; i&lt;<span class=\"hljs-built_in\">exp</span>.length(); i+=<span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">char</span> e = <span class=\"hljs-built_in\">exp</span>[i];\n    <span class=\"hljs-built_in\">string</span> left = <span class=\"hljs-built_in\">exp</span>.substr(<span class=\"hljs-number\">0</span>, i);\n    <span class=\"hljs-built_in\">string</span> right = <span class=\"hljs-built_in\">exp</span>.substr(i+<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">if</span> (e == <span class=\"hljs-string\">'^'</span>) {\n      <span class=\"hljs-keyword\">if</span> (r) {  <span class=\"hljs-comment\">// true</span>\n        sum += fnc(left, r, memo) * fnc(right, r^<span class=\"hljs-number\">1</span>, memo);\n        sum += fnc(left, r^<span class=\"hljs-number\">1</span>, memo) * fnc(right, r, memo);\n      } <span class=\"hljs-keyword\">else</span> {\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n        sum += fnc(left, r^<span class=\"hljs-number\">1</span>, memo) * fnc(right, r^<span class=\"hljs-number\">1</span>, memo);\n      }\n     \n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (e == <span class=\"hljs-string\">'|'</span>) {\n      <span class=\"hljs-keyword\">if</span> (r) { <span class=\"hljs-comment\">// true</span>\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n        sum += fnc(left, r, memo) * fnc(right, r^<span class=\"hljs-number\">1</span>, memo);\n        sum += fnc(left, r^<span class=\"hljs-number\">1</span>, memo) * fnc(right, r, memo);\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// false</span>\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n      }      \n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (r) { <span class=\"hljs-comment\">// true</span>\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n      } <span class=\"hljs-keyword\">else</span> { <span class=\"hljs-comment\">// false</span>\n        sum += fnc(left, r, memo) * fnc(right, r, memo);\n        sum += fnc(left, r^<span class=\"hljs-number\">1</span>, memo) * fnc(right, r, memo);\n        sum += fnc(left, r, memo) * fnc(right, r^<span class=\"hljs-number\">1</span>, memo);\n      }\n      \n    }    \n  }\n  memo.insert(pair&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">int</span>&gt;(<span class=\"hljs-built_in\">exp</span> + (r ? <span class=\"hljs-string\">\"-1\"</span> : <span class=\"hljs-string\">\"-0\"</span>) , sum));\n  <span class=\"hljs-keyword\">return</span> sum;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">countEval</span><span class=\"hljs-params\">(<span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">string</span> <span class=\"hljs-built_in\">exp</span>, <span class=\"hljs-keyword\">bool</span> result)</span> </span>{ \n  <span class=\"hljs-built_in\">map</span>&lt;<span class=\"hljs-built_in\">string</span>, <span class=\"hljs-keyword\">int</span>&gt; <span class=\"hljs-built_in\">map</span>;\n  <span class=\"hljs-keyword\">return</span> fnc(<span class=\"hljs-built_in\">exp</span>, result, <span class=\"hljs-built_in\">map</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; countEval(<span class=\"hljs-string\">\"1^0|0|1\"</span>, <span class=\"hljs-literal\">false</span>) &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; countEval(<span class=\"hljs-string\">\"0&amp;0&amp;0&amp;1^1|0\"</span>, <span class=\"hljs-literal\">true</span>) &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n","updatedAt":"2020-02-23T12:42:26.192Z"}