{"layout":"post-content","title":"프로그래머스 [3차] n진수게임 Javascript","date":"2019-11-28T00:00:00.000Z","categories":["algorithm"],"body":"<h1>문제 설명</h1>\n<p>튜브가 활동하는 코딩 동아리에서는 전통적으로 해오는 게임이 있다. 이 게임은 여러 사람이 둥글게 앉아서 숫자를 하나씩 차례대로 말하는 게임인데, 규칙은 다음과 같다.</p>\n<p>숫자를 0부터 시작해서 차례대로 말한다. 첫 번째 사람은 0, 두 번째 사람은 1, … 열 번째 사람은 9를 말한다.<br>\n10 이상의 숫자부터는 한 자리씩 끊어서 말한다. 즉 열한 번째 사람은 10의 첫 자리인 1, 열두 번째 사람은 둘째 자리인 0을 말한다.<br>\n이렇게 게임을 진행할 경우,<br>\n0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 0, 1, 1, 1, 2, 1, 3, 1, 4, …<br>\n순으로 숫자를 말하면 된다.</p>\n<p>한편 코딩 동아리 일원들은 컴퓨터를 다루는 사람답게 이진수로 이 게임을 진행하기도 하는데, 이 경우에는<br>\n0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, …<br>\n순으로 숫자를 말하면 된다.</p>\n<p>이진수로 진행하는 게임에 익숙해져 질려가던 사람들은 좀 더 난이도를 높이기 위해 이진법에서 십육진법까지 모든 진법으로 게임을 진행해보기로 했다.<br>\n숫자 게임이 익숙하지 않은 튜브는 게임에 져서 벌칙을 받는 굴욕을 피하기 위해, 자신이 말해야 하는 숫자를 스마트폰에 미리 출력해주는 프로그램을 만들려고 한다.     튜브의 프로그램을 구현하라.</p>\n<h1>풀이</h1>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">n, t, m, p</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> answer = <span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">var</span> game = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n    <span class=\"hljs-keyword\">var</span> number = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (game.length &lt; t*m) {\n        <span class=\"hljs-keyword\">let</span> tmp = number;       \n        <span class=\"hljs-keyword\">let</span> arrTmp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>();\n        <span class=\"hljs-keyword\">while</span> (tmp &gt;= n) {\n            arrTmp.unshift(tmp % n); <span class=\"hljs-comment\">// 배열 맨 앞에 삽입</span>\n            tmp = <span class=\"hljs-built_in\">Math</span>.floor(tmp / n); <span class=\"hljs-comment\">// Math.floor() 소숫점 내림</span>\n        }\n        arrTmp.unshift(tmp);\n        game.push(...arrTmp) <span class=\"hljs-comment\">// game.push.apply(game, arrTmp);와 같음 확장연산자(e6)</span>\n        <span class=\"hljs-comment\">//game = game.concat(arrTmp); // 배열 합치기 느리다.</span>\n        number++;\n    }\n    \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i=p<span class=\"hljs-number\">-1</span>; i&lt;game.length; i=i+m) {\n        answer += game[i].toString(n).toUpperCase(); <span class=\"hljs-comment\">// toString() number를 n진수 형태로 반환한다. abcdef를 소문자 형태로 반환해서 toUpperCase()를 사용했다.</span>\n        <span class=\"hljs-keyword\">if</span> (answer.length == t) <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> answer;\n}\n</code></pre>\n<h2>Number.prototype.toString([radix]]) 메서드</h2>\n<ul>\n<li>Number.prototype.toString() 은 Number 객체를 문자열로 반환하는 메서드다.</li>\n<li>radix는 진수를 나타내는 기수의 값으로 2~36 범위의 정수다. 이 범위를 벗어나는 radix가 주어지면 RangeError가 발생한다. (default는 10진수)</li>\n</ul>\n<p>Number 객체는 Object 객체의 toString() 메서드(<strong>Object.prototype.toString()</strong>)를 오버라이딩했다.\n그래서 Number 객체에서 toString() 메서드를 사용하면 특정 진수로 객체를 표현한 문자열을 리턴받을 수 있는 것이다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> number = <span class=\"hljs-number\">254</span>;\n<span class=\"hljs-built_in\">console</span>.log(number.toString(<span class=\"hljs-number\">16</span>)); <span class=\"hljs-comment\">// fe 출력</span>\n</code></pre>\n<h2>Array.prototype.unshift([…elementN])</h2>\n<p>새로운 요소를 배열의 맨 앞쪽에 추가하고, 배열의 길이를 리턴</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>];\narr.unshift(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// [0,1,2]</span>\narr.unshift(<span class=\"hljs-number\">-2</span>, <span class=\"hljs-number\">-1</span>); <span class=\"hljs-comment\">// [-2, -1, 0, 1, 2]</span>\n</code></pre>\n<h2>Array.prototype.push vs Array.prototype.concat</h2>\n<p>처음에는 <strong>game = game.concat(arrTmp)</strong> 식으로 배열을 합쳤다. 근데 시간이 너무 많이 소요되길래 <strong>game.push(…arrTmp)</strong> 이렇게 바꿨더니 효율성이 좀 좋아진 듯 하다. 왜 그럴까?..</p>\n<p><a href=\"https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki\">https://dev.to/uilicious/javascript-array-push-is-945x-faster-than-array-concat-1oki</a> 이 글을 보면 알 수 있다.</p>\n<p>즉 concat은 .push로 원본 배열을 수정하면서 <strong>새 배열</strong>을 만들기때문에 느리고 push는 원본 배열의 뒤에 배열을 추가하며 원본 배열을 변경하기 때문에 concat 보다는 빠르다.</p>\n<h2>다른 사람 풀이</h2>\n<p>다른 사람 풀이를 봤더니 이렇게 간단하게도 풀 수 있다는 걸 알았다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">solution</span>(<span class=\"hljs-params\">n, t, m, p</span>) </span>{\n    <span class=\"hljs-keyword\">let</span> answer = <span class=\"hljs-string\">''</span>,\n        numbers = [],\n        j = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = p; answer.length &lt; t; i += m) {\n        <span class=\"hljs-keyword\">let</span> order = i - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">while</span> (numbers[order] === <span class=\"hljs-literal\">undefined</span>) {\n            j.toString(n).toUpperCase().split(<span class=\"hljs-string\">''</span>).forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =&gt;</span> numbers.push(v));\n            j++;\n        }\n        answer += numbers[order];\n    }\n    <span class=\"hljs-keyword\">return</span> answer;\n}\n</code></pre>\n","updatedAt":"2020-01-22T18:26:22.703Z"}