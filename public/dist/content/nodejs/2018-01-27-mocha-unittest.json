{"layout":"post-content","title":"(mocha) 자바스크립트 단위테스트 시작하기","date":"2018-01-27T00:00:00.000Z","tags":["mocha","javascript"],"category":["javascript"],"body":"<p>mocha 자바스크립트 테스트 프레임워크로 단위테스트 시작하는 방법입니다.</p>\n<hr>\n<h1>단위테스트(Unit Test)가 필요한 이유?</h1>\n<p>프로그램을 작은 단위로 쪼개서 내가 짠 프로그램이 내가 원하는 결과대로 동작하는 지 테스트할 수 있다.<br>\n단위테스트를 거치면 프로그램의 안정성이 높아지며, 단위테스트를 믿고 리팩토링을 할 수 있다.</p>\n<p>자바스크립트로 짜여진 프로그램에서 오류를 찾을 때, 단위테스트를 거치지 않은 프로그램의 경우는 전체 흐름을 파악해가며 원인을 찾아야한다.<br>\n원인을 찾아 수정한다해도 이 결과가 어떤 이펙트를 가져올지 예상하기가 어려울 수 있다.</p>\n<h1>mocha 자바스크립트 테스트 프레임워크</h1>\n<h2>1. 셋팅하기 (Windows8)</h2>\n<p>mocha는 node.js가 기반인 프레임워크이기 때문에 node.js가 설치되어있어야 한다.<br>\n설치 후 cmd 창에 node --version 이라고 쳐서 버전 정보가 제대로 나오면 설치가 잘 된 것이다.</p>\n<p>cmd 창에 아래와 같이 입력하면 mocha 사용 준비 완료!</p>\n<pre><code>$npm install -g mocha\n</code></pre>\n<p>그리고 Assertion Library인 Chai를 추가해보자. 작업 디렉토리에서 아래를 cmd 창에서 실행한다.</p>\n<pre><code>$nbm install chai\n</code></pre>\n<p>그 결과, node_moduls 폴더가 생성된다.</p>\n<h2>2. 사용하기</h2>\n<p><a href=\"http://inspiredjw.com/entry/Mocha-%EB%A1%9C-%ED%95%98%EB%8A%94-JavaScript-Testing\">InspiredJW님의 티스토리 블로그를 참고했습니다!</a>.</p>\n<p>모카는 test 디렉토리에 있는 파일을 실행하기 때문에, 테스트 코드는 이 디렉토리 안에 위치시켜야한다.</p>\n<p>JsStudy/JsStudy.js</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\nexports.foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">a,b</span>) =&gt;</span> {\n\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> a !== <span class=\"hljs-string\">'number'</span> || <span class=\"hljs-keyword\">typeof</span> b !== <span class=\"hljs-string\">'number'</span>)\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\t<span class=\"hljs-keyword\">return</span> a*b;\n};\nexports.bar = <span class=\"hljs-function\">(<span class=\"hljs-params\">callback</span>) =&gt;</span> {};\n</code></pre>\n<p>JsStudy/test/JsStudyTest.js</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-meta\">'use strict'</span>;\n\n<span class=\"hljs-keyword\">let</span> chai = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'chai'</span>);\n<span class=\"hljs-keyword\">let</span> should = chai.should();\n<span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../JsStudy'</span>).foo;\n\ndescribe(<span class=\"hljs-string\">'Function Foo'</span>, () =&gt;{\n\tdescribe(<span class=\"hljs-string\">'with two number params'</span>,()=&gt;{\n\t\tit(<span class=\"hljs-string\">'should return product'</span>,()=&gt;{\n\t\t\t<span class=\"hljs-keyword\">let</span> result = foo(<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>);\n\t\t\tresult.should.be.a(<span class=\"hljs-string\">'number'</span>);\n\t\t\tresult.should.equal(<span class=\"hljs-number\">12</span>);\n\t\t});\n\t});\n});\n\ndescribe(<span class=\"hljs-string\">'with non-number params'</span>,()=&gt;{\n\tit(<span class=\"hljs-string\">'should return false'</span>,()=&gt;{\n\t\t<span class=\"hljs-keyword\">let</span> result = foo(<span class=\"hljs-number\">3</span>,<span class=\"hljs-literal\">null</span>);\n\t\tresult.should.be.false;\n\t});\n});\n</code></pre>\n<p>테스트 실행방법은 cmd 창에서 JsStudy 폴더로 이동한후, mocha 실행하기</p>\n<pre><code>$mocha\n</code></pre>\n<span class=\"clr-grey\">\nAPI    \n- describe() : 테이스틔 이름을 지정하며, 중첩하여 사용할 수 있다. 테스트를 구분하는 section이며, 단위테스트 부분을 콜백으로 넘겨준다.\n- it() : 단위테스트의 이름을 작성하고 실제 실행되는 코드를 콜백(done)으로 넘겨준다.\n- befor() : 테스트 코드가 실행되기 전 한번 실행된다.\n- after() : 모든 테스트 코드가 실행된 후 한 번 실행된다.\n- beforeEach() : (테스트 코드가 여러개일 경우) 각각의 테스트 코드가 실행되기 전마다 실행된다.\n- afterEach() : (테스트코드가 여러개일 경우) 각각의 테스트 코드가 실행된 후마다 실행된다.\n- .a(type[,msg]) : 지정된 타입과 동일한지 리턴.\n- .equal(val[,msg]) : === var과 주어진 타켓이 같은지.\n- .false : 타켓 === false\n</span>","updatedAt":"2020-01-22T18:22:42.890Z"}