{"layout":"post-content","title":"npm 로컬 패키지 설치하기","date":"2018-04-13T00:00:00.000Z","tags":["npm"],"category":["npm"],"body":"<h1>4. 로컬에 패키지를 설치해보자</h1>\n<p>패키지를 어떤 방식으로 사용하는지에 따라 우리는 로컬 또는 전역에 npm 패키지를 설치할 수 있습니다.</p>\n<ul>\n<li>Node.js의 require을 사용하여 당신의 모듈에서 패키지를 사용하려면 로컬로 설치하면 됩니다. 이는 npm 설치의 기본 동작입니다.</li>\n<li>패키지를 CLI와 같은 커맨드 라인 툴에서 사용하려면 전역으로 설치하면 됩니다.</li>\n</ul>\n<h2>패키지 다운로드하기</h2>\n<pre><code>&gt; npm install &lt;package_name&gt;\n</code></pre>\n<p>명령어를 실행하면 현재 디렉토리에 node_modules 디렉토리가 생성됩니다. (node_modules 디렉토리가 없을 경우)\n그리고 node_modules 디렉토리 안에 다운로드 받은 패키지가 존재하게됩니다.</p>\n<h2>설치된 패키지 어떤 버전일까?</h2>\n<p>로컬 디렉토리에 package.json 파일이 없다면, 가장 최신 버전의 패키지가 설치됩니다. package.json 파일이 있으면 npm은 package.json 파일에 선언된 semver rule을 만족하는 최신버전을 설치합니다.</p>\n<p>예) package.json</p>\n<pre><code>...\n&quot;dependencies&quot; : {\n&quot;lodash&quot; : &quot;~1.0.4&quot;\n}\n....\n</code></pre>\n<p>npm은 package.json에 따라 1.0.4 버전의 lodash 패키지를 설치하게됩니다.</p>\n<h2>패키지를 어떻게 사용할까?</h2>\n<p>일단 node_modules 디렉토리에 패키지가 있다면, 우리의 코드에서 패키지를 사용할 수 있습니다.</p>\n<p>예) index.js 파일</p>\n<pre><code>var lodash = require('lodash');\nvar output = lodash.without([1,2,3],1);\nconsole.log(output);    // 결과 : [2,3]\n</code></pre>\n<p>만약 lodash 패키지가 설치되지않았다면 Error : Cannot find module ‘lodash’ 에러를 보게될 것 입니다.</p>\n<h1>7. 로컬에 설치된 패키지 삭제해보자</h1>\n<p>node_modules 디렉토리의 패키지를 삭제하는 명령어</p>\n<pre><code>&gt; npm uninstall lodash\n</code></pre>\n<p>package.json의 dependecies에서 패키지를 제거하려면 save 플래그를 사용해야합니다.</p>\n<pre><code>&gt; npm uninstall --save lodash\n</code></pre>\n<p><strong>Note:</strong> 패키지가 devDependency로 설치된 경우, package.json에서 제거하는 방법은 다음과 같습니다.</p>\n<pre><code>&gt; npm uninstall --save-dev lodash\n</code></pre>\n<p>node_modules 디렉토리에 해당 패키지가 없다면 삭제가 정상적으로 된 것입니다.</p>\n<h1>8~10. 전역에 패키지를 설치/업데이트/삭제 해보기</h1>\n<p>패키지 설치</p>\n<pre><code>&gt; npm install -g jshint\n</code></pre>\n<p>패키지업데이트</p>\n<pre><code>&gt; npm update -g jshint\n</code></pre>\n<p>패키지 삭제</p>\n<pre><code>&gt; npm uninstall -g jshint\n</code></pre>\n","updatedAt":"2020-01-22T18:23:09.391Z"}