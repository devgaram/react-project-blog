{"layout":"post-content","title":"npm Working with package.json","date":"2018-04-16T00:00:00.000Z","tags":["npm"],"category":["npm"],"body":"<h1>5. Working with package.json</h1>\n<p>로컬에 설치된 npm 패키지를 관리하는 최상의 방법은 package.json 파일을 생성하는 것입니다.</p>\n<p>package.json 파일은 :</p>\n<ul>\n<li>프로젝트가 의존하고 있는 패키지들의 리스트를 보여줍니다.</li>\n<li>semantic versioning rule에 따라 프로젝트에 의존한 패키지들의 버전을 설정할 수 있습니다.</li>\n<li>빌드를 재현할 수 있으므로, 좀 더 쉽게 다른 개발자와 공유할 수 있습니다.</li>\n</ul>\n<h2>요구사항</h2>\n<p>package.json 파일이 반드시 가져야하는 것</p>\n<ul>\n<li>“name”\n<ul>\n<li>소문자</li>\n<li>한단어, 띄어쓰기 허용X</li>\n<li>-(dashes) 와 _ (underscores) 허용O</li>\n</ul>\n</li>\n<li>“version”\n<ul>\n<li>x.x.x 형태</li>\n<li>semver spec을 따름</li>\n</ul>\n</li>\n</ul>\n<pre><code>{\n &quot;name&quot; : &quot;my-awesome-package&quot;,\n &quot;version&quot; : &quot;1.0.0&quot;\n}\n</code></pre>\n<h2>package.json 파일 생성하기</h2>\n<pre><code>&gt; npm init\n또는\n&gt; npm init --yes \n#--yes === -y\n</code></pre>\n<p>위 명령어는 현재 디렉토리로부터 정보를 추출해서 해당 package.json 파일을 생성합니다.</p>\n<pre><code>{\n  &quot;name&quot;: &quot;my_package&quot;,\n  &quot;description&quot;: &quot;&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;https://github.com/ashleygwilliams/my_package.git&quot;\n  },\n  &quot;keywords&quot;: [],\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;bugs&quot;: {\n    &quot;url&quot;: &quot;https://github.com/ashleygwilliams/my_package/issues&quot;\n  },\n  &quot;homepage&quot;: &quot;https://github.com/ashleygwilliams/my_package&quot;\n}\n</code></pre>\n<ul>\n<li>name : 현재 디렉토리 이름</li>\n<li>version : 항상 1.0.0</li>\n<li>description : readme 정보 또는 “”</li>\n<li>main : 항상 index.js</li>\n<li>scripts : 기존적으로 빈 테스트 스크립트를 만든다.</li>\n<li>keywords : empty</li>\n<li>author : empty</li>\n<li>license : ISC</li>\n<li>bugs : 현재 디렉토리의 정보</li>\n<li>homepage : 현재 디렉토리의 정보</li>\n</ul>\n<p>다음과 같이 명령어 실행시 옵션을 설정할 수 있습니다.</p>\n<pre><code>&gt; npm set init.author.email &quot;wombat@npmjs.com&quot;\n&gt; npm set init.author.name &quot;ag_dubs&quot; \n&gt; npm set init.license &quot;MIT&quot; \n</code></pre>\n<h2>Dependencies 지정하기</h2>\n<p>프로젝트가 의존하는 패키지를 지정하려면 package.json 파일에 사용할 패키지들을 나열해야합니다. 그리고 패키지들은 두 개의 타입으로 나열될 수 있습니다.</p>\n<ul>\n<li>“dependencies” : 프로젝트 배포 시</li>\n<li>“devDependencies” : 프로젝트 개발 또는 테스트 시</li>\n</ul>\n<p>package.jsondp dependencies를 추가하는 더 쉬운 방법은 npm install 명령어 실행시 --save 또는 --save-dev 플래그를 사용하는 것 입니다.</p>\n<pre><code>&gt; npm install &lt;package_name&gt; --save\n&gt; npm install &lt;package_name&gt; --save-dev\n</code></pre>\n","updatedAt":"2020-01-22T18:23:09.392Z"}