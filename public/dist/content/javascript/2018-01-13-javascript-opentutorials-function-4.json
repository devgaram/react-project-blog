{"layout":"post-content","title":"(생활코딩) javascript 함수지향4","date":"2018-01-13T00:00:00.000Z","tags":["javascript"],"category":["javascript"],"body":"<p>생활코딩 함수지향 파트 중 arguments와 apply()에 대한 내용을 정리했습니다.</p>\n<hr>\n<h1>1. arguments</h1>\n<pre><code class=\"language-javascript\">function sum(){ \n    var i, _sum = 0; \n    for( i=0; i&lt; arguments.length; i++){ \n        document.write(i +  \":\" + arguments[i] + &lt;'br/&gt;'); \n        _sum += arguments[i];  \n    } \n    return _sum; \n} \ndocument.write('result : ' + sum(1,2,3,4)); \n</code></pre>\n<p>arguments는 사용자가 전달한 인자들이 담겨있는 객체다.</p>\n<ul>\n<li>.length를 통해 함수가 몇개의 인자 전달 받았는 지를 알 수 있다.</li>\n<li>arguments[i] 를 통해 각 자리의 인자 값을 알 수 있다.</li>\n</ul>\n<p>자바스크립트는 매개변수의 수가 함수의 정의와 달라도 에러가 발생하지 않는다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">one</span>(<span class=\"hljs-params\">arg1</span>)</span>{ \n    <span class=\"hljs-built_in\">console</span>.log( \n        <span class=\"hljs-string\">'one.length'</span>, one.length,         <span class=\"hljs-comment\">//1 </span>\n        <span class=\"hljs-string\">'arguments'</span>, <span class=\"hljs-built_in\">arguments</span>.length <span class=\"hljs-comment\">//2 </span>\n    ); \n}  \none(<span class=\"hljs-string\">'val1'</span>, <span class=\"hljs-string\">'val2'</span>);\n</code></pre>\n<p>위의 차이점을 이용해보면. 함수에 정의된 매개변수의 갯수와 실제 전달받는 인자의 갯수를 비교해서 대상 함수가 올바르게 사용되었는 지를 체크 할 수 있다.</p>\n<h1>2. apply() 내장함수</h1>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">arg1, arg2</span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> arg1+arg2; \n} \nsum(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>)    <span class=\"hljs-comment\">//3 </span>\nsum.apply        <span class=\"hljs-comment\">//function apply(){[native code]}     native code : 내장함수란 뜻 </span>\nsum.apply(<span class=\"hljs-literal\">null</span>, [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]);    <span class=\"hljs-comment\">//3     -첫번째 인자가 null로 들어갈 때는, 쓰지않기.</span>\n</code></pre>\n<p>왜 사용할까?</p>\n<pre><code class=\"language-javascript\">o1 = {<span class=\"hljs-attr\">val1</span> :<span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">val2</span>:<span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">val3</span>:<span class=\"hljs-number\">3</span>} \no2 = {<span class=\"hljs-attr\">v1</span>:<span class=\"hljs-number\">10</span>, <span class=\"hljs-attr\">v2</span>:<span class=\"hljs-number\">50</span>, <span class=\"hljs-attr\">v3</span>:<span class=\"hljs-number\">100</span>, <span class=\"hljs-attr\">v4</span>:<span class=\"hljs-number\">25</span>} \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">var</span> _sum = <span class=\"hljs-number\">0</span>; \n    <span class=\"hljs-keyword\">for</span>( name <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span>){ \n      _sum += <span class=\"hljs-keyword\">this</span>[name]; \n    } \n    <span class=\"hljs-keyword\">return</span> _sum; \n} \nalert(sum.apply(o1))    <span class=\"hljs-comment\">//6 </span>\nalert(sum.apply(o2))    <span class=\"hljs-comment\">//185</span>\n</code></pre>\n<p>o1 객체를 sum의 인자 값으로 전달한다.<br>\nthis는 var this = o1; 과 암시적으로 같다.<br>\n실행되는 그 순간에는 o1이라는 객체의 메소드 sum이 된다는 것.<br>\n즉, o1 = { va1 : 1, val2 : 2, val3 : 3, sum : sum} 에 o1.sum()과 같다.</p>\n","updatedAt":"2020-01-22T18:21:10.070Z"}