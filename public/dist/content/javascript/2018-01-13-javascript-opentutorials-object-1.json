{"layout":"post-content","title":"(생활코딩) javascript 객체지향1","date":"2018-01-13T00:00:00.000Z","tags":["javascript"],"category":["javascript"],"body":"<p>생활코딩 객체지향에 대한 내용을 정리했습니다.</p>\n<hr>\n<p>객체(object)는 연관되어 있는 것(변수, 메소드)들을 그룹화한 것, 각 그룹화된 것은 독립성을 가지는 부품이 된다.</p>\n<h1>1. 객체의 생성 방법</h1>\n<p>this는 함수가 속해있는 객체인 person을 가리킨다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> person = {}; \nperson.name = <span class=\"hljs-string\">'egoing'</span>; \nperson.introduce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'My name is'</span> + <span class=\"hljs-keyword\">this</span>.name; \n} \n<span class=\"hljs-built_in\">document</span>.write( person.introduce());\n</code></pre>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> person = { \n    <span class=\"hljs-string\">'name'</span> : <span class=\"hljs-string\">'egoing'</span>, \n    <span class=\"hljs-string\">'introduce'</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'My name is'</span> + <span class=\"hljs-keyword\">this</span>.name;     \n    } \n}\n</code></pre>\n<h1>2. 생성자와 new</h1>\n<p>생성자는 객체를 만드는 역할을 하는 함수.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\"></span>)</span>{} \n<span class=\"hljs-keyword\">var</span> p0 = Person();    <span class=\"hljs-comment\">//undefined </span>\n<span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">new</span> Person();    <span class=\"hljs-comment\">//Person{} 비어있는 객체</span>\n</code></pre>\n<p>new Person()<br>\nPerson() 함수가 객체의 참조자가 될 수 있다.</p>\n<p>자바는 클래스 안에 생성자가 있고, 클래스의 객체를 만든다.<br>\n자바스크립트에서는 생성자가 함수일 뿐, 어디에 속해있지 않다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>{ \n    <span class=\"hljs-keyword\">this</span>.name = name; \n    <span class=\"hljs-keyword\">this</span>.introduce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'My name is '</span>+<span class=\"hljs-keyword\">this</span>.name; \n    } \n} \n \n<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">'egoing'</span>); \n<span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">'leezche'</span>); \n \n<span class=\"hljs-built_in\">document</span>.write(p1.introduce());    <span class=\"hljs-comment\">//My name is egoing </span>\n<span class=\"hljs-built_in\">document</span>.write(p2.introduce());    <span class=\"hljs-comment\">//My name is leezche</span>\n</code></pre>\n<p>생성자 Person이라는 함수를 정의했다.<br>\nPerson 앞에 new가 존재하기 때문에 함수가 아닌 생성자가 된다.<br>\n생성자 함수가 하는 일은 객체의 초기화이며, 객체가 가지고 있는 정보, 객체가 할 수 있는 일을 정의하게 된다.<br>\n덕분에 코드의 재사용성이 높아진다.</p>\n<h1>3. 함수와 this</h1>\n<p>전역변수와 전역함수는 모두 window라는 전역객체의 속성과 메소드다.<br>\n<span class=\"clr-grey\">node.js에서 전역객체는 global이다.</span></p>\n<h2>1) 메소드와 this</h2>\n<p>this는 함수를 어떻게 호출하느냐에 따라 this를 가리키는 대상이 달라진다.</p>\n<p>전역함수의 this는 window와 같다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">window</span> === <span class=\"hljs-keyword\">this</span>){ \n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"window === this\"</span>);  \n    } \n}  \nfunc();    <span class=\"hljs-comment\">//window === this</span>\n</code></pre>\n<p>객체의 소속인 메소드의 this는 그 객체를 가르킨다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> o = { \n    <span class=\"hljs-attr\">func</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n        <span class=\"hljs-keyword\">if</span>(o === <span class=\"hljs-keyword\">this</span>){ \n            <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">\"o === this\"</span>);     \n         } \n    } \n} \no.func();    <span class=\"hljs-comment\">//o===this</span>\n</code></pre>\n<h2>2) 생성자와 this</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> funcThis = <span class=\"hljs-literal\">null</span>; \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Func</span>(<span class=\"hljs-params\"></span>)</span>{ \n    funcThis = <span class=\"hljs-keyword\">this</span>; \n} \n \n<span class=\"hljs-keyword\">var</span> o1 = Func(); \n<span class=\"hljs-keyword\">if</span>( funcThis === <span class=\"hljs-built_in\">window</span>){ \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">'window'</span>); \n} \n \n<span class=\"hljs-keyword\">var</span> o2 = <span class=\"hljs-keyword\">new</span> Func(); \n<span class=\"hljs-keyword\">if</span>(funcThis === o2){ \n    <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">'o2 &lt;/br&gt;'</span>); \n} \n<span class=\"hljs-comment\">// window, o2 둘다 출력됨.</span>\n</code></pre>\n<p>Func를 생성자로 사용되면 this는 객체를 가리키고, 함수로 사용되면 this는 window는 가리킨다.</p>\n<h2>3) 객체로서 함수</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\">x,y</span>)</span>{<span class=\"hljs-keyword\">return</span> x+y;} \n<span class=\"hljs-keyword\">var</span> sum2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Function</span>(<span class=\"hljs-string\">'x'</span>,<span class=\"hljs-string\">'y'</span>,<span class=\"hljs-string\">'return x+y'</span>);\n</code></pre>\n<p>sum이라는 함수는 sum이라는 객체를 만든 것이다.<br>\n<span class=\"clr-grey\">\nfunction sum(){} 함수 리터럴<br>\nvar o ={} 객체리터럴<br>\nvar a = [0,1,2] 배열 리터럴<br>\n편리하게 값을 만들 수 있는 문법적인 체계를 리터럴이라고 한다.\n</span></p>\n<h2>4) apply와 this</h2>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> o = {} \n<span class=\"hljs-keyword\">var</span> p = {} \n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">func</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">switch</span>(<span class=\"hljs-keyword\">this</span>){ \n        <span class=\"hljs-keyword\">case</span> o :  \n            <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">'o'</span>); \n            <span class=\"hljs-keyword\">break</span>;\n        <span class=\"hljs-keyword\">case</span> p :  \n            <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">'p'</span>); \n            <span class=\"hljs-keyword\">break</span>; \n        <span class=\"hljs-keyword\">case</span> <span class=\"hljs-built_in\">window</span> :  \n            <span class=\"hljs-built_in\">document</span>.write(<span class=\"hljs-string\">'window'</span>); \n            <span class=\"hljs-keyword\">break</span>; \n    } \n} \n \nfunc();              <span class=\"hljs-comment\">//window </span>\nfunc.apply(o);    <span class=\"hljs-comment\">//o</span>\nfunc.apply(p);    <span class=\"hljs-comment\">//p</span>\n</code></pre>\n<p>자바스크립트의 this는 변화무쌍하다.</p>\n","updatedAt":"2020-01-22T18:21:09.422Z"}