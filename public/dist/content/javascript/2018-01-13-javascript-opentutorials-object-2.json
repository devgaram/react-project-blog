{"layout":"post-content","title":"(생활코딩) javascript 객체지향2","date":"2018-01-13T00:00:00.000Z","tags":["javascript"],"category":["javascript"],"body":"<p>생활코딩 객체지향 파트 중 상속과 프로토타입에 대한 내용을 정리했습니다.</p>\n<hr>\n<h1>1. 상속</h1>\n<p>상속을 하기 위한 준비 작업</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>{ \n    <span class=\"hljs-keyword\">this</span>.name = name; \n} \n \nPerson.prototype.name = <span class=\"hljs-literal\">null</span>; \nPerson.prototype.introduce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'My name is'</span> + <span class=\"hljs-keyword\">this</span>.name; \n} \n \n<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Person(<span class=\"hljs-string\">'egoing'</span>); \n<span class=\"hljs-built_in\">document</span>.write(p1.introduce());    <span class=\"hljs-comment\">//My name is egoing</span>\n</code></pre>\n<p>객체의 프로퍼티 정의 방법은 생성자를 이용하는 것과 프로토타입을 이용하는 것이 있다.<br>\nPerson 객체에는 prototype이라는 속성이 있는 데 그 안에는 어떤 객체가 있다.<br>\n.name을 통해 그 객체에 값을 줄 수 있다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Person</span>(<span class=\"hljs-params\">name</span>)</span>{ \n   <span class=\"hljs-keyword\">this</span>.name = name; \n}\nPerson.prototype.name = <span class=\"hljs-literal\">null</span>; \nPerson.prototype.introduce = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'My name is'</span> + <span class=\"hljs-keyword\">this</span>.name; \n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Programmer</span>(<span class=\"hljs-params\">name</span>)</span>{ \n    <span class=\"hljs-keyword\">this</span>.name = name; \n}\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Designer</span>(<span class=\"hljs-params\">name</span>)</span>{ \n    <span class=\"hljs-keyword\">this</span>.name = name; \n}\n \n<span class=\"hljs-comment\">/**상속방법**/</span>\nDesigner.prototype = <span class=\"hljs-keyword\">new</span> Person();\nDesigner.prototype.design= <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"beautiful!\"</span>; \n} \nProgrammer.prototype = <span class=\"hljs-keyword\">new</span> Person(); \nProgrammer.prototype.coding = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{ \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"hello world!\"</span>; \n}\n \n<span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Programmer(<span class=\"hljs-string\">'egoing'</span>); \n<span class=\"hljs-built_in\">document</span>.write(p1.introduce() + <span class=\"hljs-string\">''</span>);    <span class=\"hljs-comment\">//My name is egoing이 출력됨 </span>\n<span class=\"hljs-built_in\">document</span>.write(p1.coding() + <span class=\"hljs-string\">''</span>);    <span class=\"hljs-comment\">//hello world! </span>\n \n<span class=\"hljs-keyword\">var</span> p2 = <span class=\"hljs-keyword\">new</span> Desiner(<span class=\"hljs-string\">'leezche'</span>); \n<span class=\"hljs-built_in\">document</span>.write(p2.design() + <span class=\"hljs-string\">''</span>);    <span class=\"hljs-comment\">//beautiful!</span>\n</code></pre>\n<p>Programmer에는 introduce 속성이 정의되어 있지않은데 어떻게 사용할 수 있었을까?<br>\nPerson의 introduce를 상속받았기 때문이다.</p>\n<p>객체를 생성할 때, 자바스크립트는 생성자 함수가 prototype라는 프로퍼티를 갖고 있는 지 확인한다.<br>\n그리고 생성자 함수에 들어있는 객체와 똑같은 객체를 만들어서 생성자의 결과로 리턴을 해준다.</p>\n<p>name과 introduce라는 프로퍼티가 prototype이라는 객체가 가지고 있다.<br>\n즉, prototype이라는 객체를 리턴한다?<br>\n그래서 Programmer의 prototype이라는 프로퍼티에 저장된다.</p>\n<span class=\"clr-note\">\n*생성자의 prototype에 상속받을 객체를 new 한다.    \n*Programmer.prototype = new Person()\n</span>\n<p>기본적으로 가지고있는 property를 가진 객체를 생성하기 위해서 객체 리터럴 대신, new라는 키워드를 사용한다.</p>\n<h1>2. prototype</h1>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Ultra</span>(<span class=\"hljs-params\"></span>)</span>{} \nUltra.prototype.ultraProp = <span class=\"hljs-literal\">true</span>; \n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Super</span>(<span class=\"hljs-params\"></span>)</span>{} \nSuper.prototype = <span class=\"hljs-keyword\">new</span> Ultra(); \n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\"></span>)</span>{} \nSub.prototype = <span class=\"hljs-keyword\">new</span> Super(); \n \n<span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-keyword\">new</span> Sub() \n<span class=\"hljs-built_in\">console</span>.log(o.ultraProp);    <span class=\"hljs-comment\">//true출력됨. </span>\n \n<span class=\"hljs-comment\">//1) </span>\no.ultraProp = <span class=\"hljs-number\">1</span>; \n<span class=\"hljs-built_in\">console</span>.log(o.ultraProp);    <span class=\"hljs-comment\">//1</span>\n</code></pre>\n<p>o.ultraProp o라는 객체가 ultraProp를 가지고 있는지 찾는다. 그래서 1이 출력됨.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Ultra</span>(<span class=\"hljs-params\"></span>)</span>{} \nUltra.prototype.ultraProp = <span class=\"hljs-literal\">true</span>; \n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Super</span>(<span class=\"hljs-params\"></span>)</span>{} \nSuper.prototype = <span class=\"hljs-keyword\">new</span> Ultra(); \n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\"></span>)</span>{} \nSub.prototype = <span class=\"hljs-keyword\">new</span> Super(); \nSub.prototype.ultraProp = <span class=\"hljs-number\">2</span>; \n \n<span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-keyword\">new</span> Sub() \n<span class=\"hljs-built_in\">console</span>.log(o.ultraProp);    <span class=\"hljs-comment\">//2가 출력됨</span>\n</code></pre>\n<p>o객체에 ultraProp 프로퍼티를 찾는다. 없으면 o라는 객체의 생성자를 알아 낸후, 이 생성자의 프로토타입 객체를 뒤져서 그 객체의 propery에 ultraProp가 있는 지 찾는다.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Ultra</span>(<span class=\"hljs-params\"></span>)</span>{} \nUltra.prototype.ultraProp = <span class=\"hljs-literal\">true</span>; \n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Super</span>(<span class=\"hljs-params\"></span>)</span>{} \nSuper.prototype = <span class=\"hljs-keyword\">new</span> Ultra(); \n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sub</span>(<span class=\"hljs-params\"></span>)</span>{} \n<span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-keyword\">new</span> Super(); \ns.ultraProp = <span class=\"hljs-number\">3</span>; \nSub.prototype = s;  \n \n<span class=\"hljs-keyword\">var</span> o = <span class=\"hljs-keyword\">new</span> Sub() \n<span class=\"hljs-built_in\">console</span>.log(o.ultraProp);    <span class=\"hljs-comment\">//3이 출력됨</span>\n</code></pre>\n","updatedAt":"2020-01-22T18:21:10.070Z"}