{"layout":"post-content","title":"(생활코딩) javascript 함수지향1","date":"2018-01-11T00:00:00.000Z","tags":["javascript"],"category":["javascript"],"body":"<p>생활코딩 함수지향 파트 중 변수의 유효범위에 대한 내용을 정리했습니다.</p>\n<hr>\n<h1>변수의 유효범위</h1>\n<p>예제1) 지역변수와 전역변수의 구분1</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> vscope = <span class=\"hljs-string\">'global'</span>;    <span class=\"hljs-comment\">//전역변수</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fscope</span>(<span class=\"hljs-params\"></span>)</span>{\n   alert(vscope);\n}\nfscope();    <span class=\"hljs-comment\">//global</span>\n</code></pre>\n<span class=\"clr-grey\">\n**Note:** 전역변수 : 애플리케이션 전역에서 접근 가능한 변수    \n**Note:** 지역변수 : 함수 내에서만 접근 가능한 변수    \n*변수에 접근할 때, 지역변수를 우선적으로 찾는다.\n</span>\n</br>\n예제2) 지역변수와 전역변수의 구분2\n```javascript\nvar vscope = 'global';   \nfunction fscope(){\n   var vscope = 'local';    //지역변수\n   var lv = 'local value';   //지역변수\n   alert(vscope);\n}\nfscope();    //local\nalert(lv);    //undefined\n```\n<p>예제3) 지역변수와 전역변수의 구분3</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{\n   i=<span class=\"hljs-number\">0</span>;\n}\n<span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">5</span>; i++){    <span class=\"hljs-comment\">// i는 전역변수</span>\n    a();\n    <span class=\"hljs-built_in\">document</span>.write(i);\n}\n</code></pre>\n<p>for문의 i는 전역변수기 때문에 해당 코드는 계속 실행되다가 브라우저가 멈춘다.</p>\n<p>예제4) 전역변수 안쓰는 방법1</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> MYAPP = {}\nMYAPP.calculator = { <span class=\"hljs-comment\">//객체의 속성(calculator)에도 객체를 생성.</span>\n  <span class=\"hljs-string\">'left'</span> : <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">'right'</span> : <span class=\"hljs-literal\">null</span>\n}\nMYAPP.coordinate = {\n   <span class=\"hljs-string\">'left'</span> : <span class=\"hljs-literal\">null</span>,\n   <span class=\"hljs-string\">'right'</span> : <span class=\"hljs-literal\">null</span>\n}\n\nMYAPP.calculator.left = <span class=\"hljs-number\">10</span>;\nMYAPP.calculator.right = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">return</span> MYAPP.calculator.left + MYAPP.calculator.right;\n}\n<span class=\"hljs-built_in\">document</span>.write(sum());    <span class=\"hljs-comment\">//30</span>\n</code></pre>\n<p>MYAPP 전역변수 하나만 생성하고, 그 안에 필요한 전역변수를 정의한다.</p>\n<p>예제5) 전역변수 안쓰는 방법2</p>\n<pre><code class=\"language-javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"hljs-keyword\">var</span> MYAPP = {}\nMYAPP.calculator = { <span class=\"hljs-comment\">//객체의 속성(calculator)에도 객체를 생성.</span>\n  <span class=\"hljs-string\">'left'</span> : <span class=\"hljs-literal\">null</span>,\n  <span class=\"hljs-string\">'right'</span> : <span class=\"hljs-literal\">null</span>\n}\nMYAPP.coordinate = {\n   <span class=\"hljs-string\">'left'</span> : <span class=\"hljs-literal\">null</span>,\n   <span class=\"hljs-string\">'right'</span> : <span class=\"hljs-literal\">null</span>\n}\n\nMYAPP.calculator.left = <span class=\"hljs-number\">10</span>;\nMYAPP.calculator.right = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sum</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">return</span> MYAPP.calculator.left + MYAPP.calculator.right;\n}\n<span class=\"hljs-built_in\">document</span>.write(sum());    <span class=\"hljs-comment\">//30</span>\n}());    <span class=\"hljs-comment\">//익명함수</span>\n</code></pre>\n<p>전역변수가 절대 존재하지 않게 개발할 때, 익명함수. 일회성함수를 이용한다.<br>\nJquery와 같은 라이브러리에서 모듈화 기법으로 많이 사용한다.</p>\n<p>예제6) 자바와의 차이점. for문 안에서의 변수.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">for</span>( <span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">1</span>; i++){\n  <span class=\"hljs-keyword\">var</span> name= <span class=\"hljs-string\">\"local no!\"</span>;\n}\nalert(name);    <span class=\"hljs-comment\">//local no!</span>\n</code></pre>\n<p>자바는 반복문, 조건문 안에서 선언된 변수를 지역변수 취급하기 때문에 위와 같은 로직으로 실행시키면 에러가 난다.<br>\n그러나 자바스크립트에서 해당 변수는 전역변수이다.</p>\n<p>예제7) 정적 유효범위</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">a</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">10</span>;\n  b();\n}\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">b</span>(<span class=\"hljs-params\"></span>)</span>{\n  <span class=\"hljs-built_in\">document</span>.write(i);    <span class=\"hljs-comment\">//누구의 i일까?</span>\n}\na();    <span class=\"hljs-comment\">//5가 출력된다!</span>\n</code></pre>\n<p>함수에서 변수를 찾을 때, 함수 내 지역변수를 먼저 찾고. 전역변수를 찾는다.<br>\n<span class=\"clr-note\">\n**사용(호출)될 때가 아니라 정의될 때의 전역변수가 사용된다. -&gt; 정적 유효범위\n</span></p>\n","updatedAt":"2020-01-22T18:21:09.422Z"}