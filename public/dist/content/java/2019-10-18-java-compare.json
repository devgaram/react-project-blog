{"layout":"post-content","title":"Java Comparator과 Comparable","date":"2019-10-18T00:00:00.000Z","tags":["java"],"categories":["Java"],"body":"<p>PS 문제를 풀다가 Arrays.sort()와 Collections.sort()를 오름차순(디폴트)이 아닌 다른 기준으로 정렬하고 싶을 때가 있었다. 찾아보니 Comparator 또는 Comparable을 사용하면 된다고 한다. 음… 알아본 김에 잊어버리지않게 기록을 해야겠다!</p>\n<h1>컬렉션을 입맛대로 정렬하고 싶다면?</h1>\n<p>내맘대로 컬렉션의 정렬 기준을 정하고 싶다면 <code>Comparator</code>과 <code>Comparable</code> 인터페이스를 사용하면 된다.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> java.util.Comparator;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Comparator</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(Object o1, Object o2)</span></span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">equals</span><span class=\"hljs-params\">(Object obj)</span></span>;\n}\n</code></pre>\n<br/>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">import</span> java.lang.Comparable;\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">Comparable</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Object o)</span></span>; <span class=\"hljs-comment\">// 양수 : 내림차순, 음수 : 오름차순</span>\n}\n</code></pre>\n<h1>그럼 둘의 차이는 무엇일까?</h1>\n<p>Comparable을 구현한 클래스들은 기본적으로 오름차순으로 정렬되도록 구현되어있다.<br>\nInteger, Character와 같은 <code>wrapper</code> 클래스(int, long, float, double 등을 객체화한 클래스)와 <code>String, Date, File</code>과 같은 것이 Comparable을 구현한 대표적 클래스이다. 그 외 Java API 문서에서 클래스 목록을 확인할 수 있다.<br>\n그래서 우리가 <code>Arrays.sort(정렬대상)</code> 로 오름차순 정렬을 할 수 있는 것이다. 아하!</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Integer</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Number</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Comparable</span> </span>{\n    ...\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Object o)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> compareTo((Integer) o);\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Integer anotherInteger)</span> </span>{\n        <span class=\"hljs-keyword\">int</span> thisVal = <span class=\"hljs-keyword\">this</span>.value;\n        <span class=\"hljs-keyword\">int</span> anotherVal = anotherInteger.value;\n        <span class=\"hljs-keyword\">return</span> (thisVal &lt; anotherVal ? -<span class=\"hljs-number\">1</span> : (thisVal ==anotherVal ? <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">1</span>));\n    }\n}\n</code></pre>\n<p>실제 Integer 클래스의 일부이다.<br>\n보이는 것 처럼 Comparable 인터페이스를 구현하고 compareTo 메서드에서 오름차순으로 정렬되도록 정의해놓았다.</p>\n<p>Comparator 인터페이스는 Comparable로 구현된 클래스를, 또는 커스텀 클래스를 기본 정렬 기준 외에 다른 기준으로 정렬하고자 할 때 사용하면 된다.<br>\n아래는 실제 예제로 백준 16236 아기 상어 문제를 풀 때 우선순위큐의 정렬기준을 Comparator을 이용해 정의한 것이다.</p>\n<pre><code class=\"language-java\">PriorityQueue&lt;Point&gt; pq = <span class=\"hljs-keyword\">new</span> PriorityQueue&lt;&gt;(<span class=\"hljs-keyword\">new</span> Comparator&lt;Point&gt;() {\n\t<span class=\"hljs-meta\">@Override</span>\n\t<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compare</span><span class=\"hljs-params\">(Point o1, Point o2)</span> </span>{\n\t\t<span class=\"hljs-keyword\">if</span> (o1.dis != o2.dis) <span class=\"hljs-keyword\">return</span> o1.dis-o2.dis;\n\t\t<span class=\"hljs-keyword\">if</span> (o1.row != o2.row) <span class=\"hljs-keyword\">return</span> o1.row-o2.row;\n\t\t<span class=\"hljs-keyword\">return</span> o1.col-o2.col;\n\t}\n});\n</code></pre>\n<p>또는 책의 예제를 보면 따로 클래스를 정의해서 사용할 수 있다.<br>\n이 예제는 Comparable을 구현한 클래스 String의 정렬 방식을 내림차순으로 바꾸는 방법이다.<br>\n단순히 -1을 곱해 반대의 값을 반환하게 구현했다.</p>\n<pre><code class=\"language-java\">\nArrays.sort(strArr, <span class=\"hljs-keyword\">new</span> Descending());\n\nClass Descending implements Comparator {\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">compareTo</span><span class=\"hljs-params\">(Object o1, Object o2)</span> </span>{\n        <span class=\"hljs-keyword\">if</span> (o1 <span class=\"hljs-keyword\">instanceof</span> Comparable &amp;&amp; o2 <span class=\"hljs-keyword\">instanceof</span> Comparable) {\n            Comparable c1 = (Comparable) o1;\n            Comparable c2 = (Comparable) o2;\n            <span class=\"hljs-keyword\">return</span> c1.compareTo(c2) * -<span class=\"hljs-number\">1</span>;\n        }\n    }\n}\n</code></pre>\n<p>이제 내맘대로 정렬할 수 있게 되었담!!!</p>\n<p>자바의 정석 책을 참고했습니다.</p>\n","updatedAt":"2020-01-22T18:25:47.835Z"}