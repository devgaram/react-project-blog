{"layout":"post-content","title":"안드로이드 MVVM에 대해 알아보자1","date":"2019-01-07T00:00:00.000Z","tags":["android","mvvm"],"category":["android"],"body":"<p>Coding in Flow의  Room + ViewModel + LiveData + RecyclerView (MVVM) 튜토리얼을 정리했습니다.</p>\n<hr>\n<h1>파일 구성</h1>\n<ul>\n<li>MainActivity.java</li>\n<li>Note.java</li>\n<li>NoteAdapter.java</li>\n<li>NoteDao.interface</li>\n<li>NoteDatabase.java</li>\n<li>NoteRepository.java</li>\n<li>NoteViewModel.java</li>\n</ul>\n<h1>MVVM - VIEW와 VIEWMODEL</h1>\n<p><span class=\"li-icon\">MainActivity.class : 앱의 시작점으로 RecyclerView 설정 및 ViewModel 생성하는 부분 </span>\n<span class=\"li-icon\">NoteViewModel.class : UI 컴포넌트와 UI 데이터의 분리</span>\n<span class=\"li-icon\">NoteAdapter.class : 리사이클러뷰 어댑터</span>\n<span class=\"li-icon\">NoteRepository.class : 저장소, 도메인과 모델 사이의 중간체 역할?</span></p>\n<h2>1. 리사이클러뷰 구현</h2>\n<pre><code class=\"language-java\">RecyclerView recyclerView = findViewById(R.id.recycler_view);\nrecyclerView.setLayoutManager(<span class=\"hljs-keyword\">new</span> LinearLayoutManager(<span class=\"hljs-keyword\">this</span>));   <span class=\"hljs-comment\">// 1)</span>\nrecyclerView.setHasFixedSize(<span class=\"hljs-keyword\">true</span>); <span class=\"hljs-comment\">// 2)</span>\n\n<span class=\"hljs-keyword\">final</span> NoteAdapter adapter = <span class=\"hljs-keyword\">new</span> NoteAdapter();  <span class=\"hljs-comment\">// 3)</span>\nrecyclerView.setAdapter(adapter);   <span class=\"hljs-comment\">// 3-1)</span>\n</code></pre>\n<ol>\n<li>\n<p>LayoutManager 클래스, 아이템을 어떻게 배치할 것인가를 결정한다.<br>\n<span class=\"clr-grey\">LinearLayoutManager 클래스 : 가로/세로 형태로 아이템을 배열한다.</span></p>\n</li>\n<li>\n<p>각 아이템의 변화가 리사이클러 뷰의 전체 크기에 영향을 끼치지 않는다면 true를 사용한다.</p>\n</li>\n<li>\n<p>데이터를 리사이클러뷰에 연결해 줄 어댑터 객체 생성</p>\n</li>\n</ol>\n<p>3-1) 3)에서 생성한 어댑터 객체를 리사이클러뷰에 붙인다.</p>\n<p><span id=\"viewModel\"></span></p>\n<h2>2. ViewModel과 LiveData</h2>\n<p><a href=\"/android/android-viewModel/\">뷰모델 개념 익히러가기</a>.</p>\n<pre><code class=\"language-java\">noteViewModel = ViewModelProviders.of(<span class=\"hljs-keyword\">this</span>).get(NoteViewModel<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)</span>;\n</code></pre>\n<p><strong>ViewModel 객체 요청</strong><br>\n보통 ViewModel 생성 요청은 <code class=\"codetainer\">onCreate()</code> 메서드에서 이루어지며, <strong>ViewModelProvider 클래스</strong>를 통해서 ViewModel 객체를 생성한다.\nViewModelProviders 클래스의 <code class=\"codetainer\">of(this)</code> 를 통해 this(UI 컨트롤러) 스코프를 가진 ViewModelProvider 인스턴스가 반환된다.\n리턴된 ViewModelProvider 객체의 메서드 <code class=\"codetainer\">get(NoteViewModel.class)</code> 를 통해 NoteViewModel 인스턴스가 생성된다.</p>\n<p><span class=\"clr-grey\"><strong>NOTE:</strong> get()은 이미 ViewModel 객체가 생성되었을 경우, 그 객체를 리턴한다. </span></p>\n<p><span id=\"LiveData\"></span>\n<strong>LiveData 사용</strong><br>\n<a href=\"/android/android-LiveData/\">LiveData 개념 익히러가기</a>.</p>\n<p>noteViewModel.java</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NoteViewModel</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AndroidViewModel</span> </span>{\n    <span class=\"hljs-comment\">// ...생략</span>\n    <span class=\"hljs-keyword\">private</span> LiveData&lt;List&lt;Note&gt;&gt; allNotes;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">NoteViewModel</span><span class=\"hljs-params\">(@NonNull Application application)</span> </span>{\n        <span class=\"hljs-keyword\">super</span>(application);\n        repository = <span class=\"hljs-keyword\">new</span> NoteRepository(application);\n        allNotes = repository.getAllNotes();\n    }\n\n    <span class=\"hljs-comment\">// ...생략</span>\n    <span class=\"hljs-keyword\">public</span> LiveData&lt;List&lt;Note&gt;&gt; getAllNotes() {\n        <span class=\"hljs-keyword\">return</span> allNotes;\n    }\n}\n</code></pre>\n<p>LiveData는 보통 ViewModel 내에서 함께 쓰인다.</p>\n<p>MainActivity.java</p>\n<pre><code class=\"language-java\">noteViewModel.getAllNotes().observe(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-keyword\">new</span> Observer&lt;List&lt;Note&gt;&gt;() {  <span class=\"hljs-comment\">// 1) LifeCycleOwner, Observer</span>\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onChanged</span><span class=\"hljs-params\">(@Nullable List&lt;Note&gt; notes)</span> </span>{ <span class=\"hljs-comment\">// 2)</span>\n        <span class=\"hljs-comment\">// update RecyclerView</span>\n        <span class=\"hljs-comment\">// Toast.makeText(MainActivity.this, \"onchanged\", Toast.LENGTH_SHORT).show();</span>\n        adapter.setNotes(notes);\n    }\n});\n</code></pre>\n<ol>\n<li>\n<p><code class=\"codetainer\">noteViewModel.getAllNotes()</code>를 통해 LiveData를 리턴받고 <code class=\"codetainer\">observe()</code> 메서드를 통해 Observer를 붙여 감지를 시작한다.\n<span class=\"clr-grey\">보통 Observer는 프래그먼트나 액티비티 같은 UI 컨트롤러에서 만든다.</span><br>\n<span class=\"clr-note\">LiveData의 data가 변경될 때 LifeCycleOwner가 활성화 되어있는 한 등록된 모든 Observer들 에게 이벤트를 보낸다.</span></p>\n</li>\n<li>\n<p>Observer는 <code class=\"codetainer\">onChanged()</code> 메서드를 반드시 오버라이드해야하며, <code class=\"codetainer\">onChanged()</code> 메서드에서 UI 업데이트를 한다.</p>\n</li>\n</ol>\n<h1>MVVM - MODEL</h1>\n<p><span class=\"li-icon\">NoteDatabase.class</span>\n<span class=\"li-icon\">NoteDao.interface</span>\n<span class=\"li-icon\">Note.class</span></p>\n<p>Room은 SQLite 추상계층을 감싸고 있으며, 쉽게 데이터베이스에 접근하여 SQLite를 자유롭게 사용할 수 있다. Room에는 세가지 주요한 컴포넌트가 있다.</p>\n<h2>1. Database (NoteDatabase.class)</h2>\n<p>데이터베이스 홀더를 포함하고, 관계형 데이터베이스에 접근할 수 있는 액세스 포인트를 제공한다.</p>\n<pre><code class=\"language-java\">@Database(entities = {Note.class}, version = 1, exportSchema = false)   // 1)\npublic abstract class NoteDatabase extends RoomDatabase {\n\n    private static NoteDatabase instance;\n\n    public abstract NoteDao noteDao();  // 3)\n\n    public static synchronized NoteDatabase getInstance(Context context) {\n        if (instance == null) {\n            instance = Room.databaseBuilder(context.getApplicationContext(),    // 4)\n                    NoteDatabase.class, \"note_database\")\n                    .fallbackToDestructiveMigration()\n                    .addCallback(roomCallback) \n                    .build();\n        }\n        return instance;\n    }\n    // ..생략\n}\n</code></pre>\n<ol>\n<li>@Database 애노테이션을 클래스에 달아야하며, 데이터베이스와 관련된 Entity들은 애노테이션 인자값으로 포함해야한다.</li>\n<li>RoomDatabase를 상속한 abstract class여야 한다.</li>\n<li>abstract method 포함해야하는데, 이 메소드에는 인자가 0개이고 reture되는 클래스가 @Dao 애노테이션을 달고 있어야한다.</li>\n<li>런타임때에는 Room.databaseBuilder() 또는 Room.inMemoryDatabaseBuilder()를 통해 Database의 객체를 얻어 낼 수 있다.</li>\n</ol>\n<p><span class=\"clr-grey\"><strong>Note:</strong> RoomDatabase 객체를 인스턴스화 하는 비용은 매우 크므로 인스턴스를 얻는 작업을 싱글톤패턴으로 만드는 게 좋다.</span></p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Database</span>(entities = {Note<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>}, <span class=\"hljs-title\">version</span> </span>= <span class=\"hljs-number\">1</span>, exportSchema = <span class=\"hljs-keyword\">false</span>)   <span class=\"hljs-comment\">// 1)</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">NoteDatabase</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">RoomDatabase</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> NoteDatabase instance;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> NoteDao <span class=\"hljs-title\">noteDao</span><span class=\"hljs-params\">()</span></span>;\n    <span class=\"hljs-comment\">// ..생략</span>\n    \n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> RoomDatabase.Callback roomCallback = <span class=\"hljs-keyword\">new</span> RoomDatabase.Callback() {\n\n        <span class=\"hljs-comment\">// 데이터베이스가 처음 생성될 때 호출됨, 모든 테이블이 생성된 후 호출됨.   </span>\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onCreate</span><span class=\"hljs-params\">(@NonNull SupportSQLiteDatabase db)</span> </span>{ \n            <span class=\"hljs-keyword\">super</span>.onCreate(db);\n            <span class=\"hljs-keyword\">new</span> PopulateDbAsyncTask(instance).execute(); <span class=\"hljs-comment\">// AsyncTask 실행</span>\n        }\n    };\n\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">PopulateDbAsyncTask</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AsyncTask</span>&lt;<span class=\"hljs-title\">Void</span>, <span class=\"hljs-title\">Void</span>, <span class=\"hljs-title\">Void</span>&gt; </span>{\n        <span class=\"hljs-keyword\">private</span> NoteDao noteDao;\n\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-title\">PopulateDbAsyncTask</span><span class=\"hljs-params\">(NoteDatabase db)</span> </span>{\n            noteDao = db.noteDao();\n        }\n\n        <span class=\"hljs-meta\">@Override</span>\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> Void <span class=\"hljs-title\">doInBackground</span><span class=\"hljs-params\">(Void... voids)</span> </span>{\n            noteDao.insert(<span class=\"hljs-keyword\">new</span> Note(<span class=\"hljs-string\">\"Title 1\"</span>, <span class=\"hljs-string\">\"Description 1\"</span>, <span class=\"hljs-number\">1</span>));\n            noteDao.insert(<span class=\"hljs-keyword\">new</span> Note(<span class=\"hljs-string\">\"Title 2\"</span>, <span class=\"hljs-string\">\"Description 2\"</span>, <span class=\"hljs-number\">2</span>));\n            noteDao.insert(<span class=\"hljs-keyword\">new</span> Note(<span class=\"hljs-string\">\"Title 3\"</span>, <span class=\"hljs-string\">\"Description 3\"</span>, <span class=\"hljs-number\">3</span>));\n\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">null</span>;\n        }\n    }\n}\n</code></pre>\n<p><strong>AsyncTask클래스</strong><br>\n비즈니스 로직과 UI 컴포넌트 조작이 동시에 일어나야 할 때 유용하며, 비교적 오래 걸리지 않는 작업에 적합하다. 또한, task 캔슬이 용이하다.</p>\n<p>AsyncTask &lt;Params, Progress, Result&gt; 제너릭 타입\n<span class=\"li-icon\">Params: doInBackground 파라미타 타입이며, execute 메소드의 인자 값이 된다.</span>\n<span class=\"li-icon\">Progress: doInBakcgroud 작업 시 진행 단위의 타입으로 onProgressUpdate 파라미터의 타입이다.</span>\n<span class=\"li-icon\">doInBackground 리턴값으로 onPostExecute 파라미터 타입이다.</span></p>\n<p><span class=\"clr-grey\"><strong>제네릭스(Generics):</strong> 객체 생성시 타입을 선언하므로 캐스팅할 필요가 없으며, 다른 타입을 할당할 경우 컴파일 단계에서 예외처리가 된다. <T>는 객체(Object) 타입이다.</span></p>\n<h2>2. Entity (Note.class)</h2>\n<p>Entity를 사용하여 데이터 구조를 정의하고, 데이터베이스 테이블을 표현한다.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Entity</span>(tableName = <span class=\"hljs-string\">\"note_table\"</span>)   <span class=\"hljs-comment\">// tableName 속성 : 테이블명을 Note로 사용하고 싶지 않을 때</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Note</span> </span>{\n\n    <span class=\"hljs-meta\">@PrimaryKey</span>(autoGenerate = <span class=\"hljs-keyword\">true</span>)    <span class=\"hljs-comment\">// 기본키 정의 필수</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> id;\n    <span class=\"hljs-meta\">@ColumnInfo</span>(name = <span class=\"hljs-string\">\"Notetitle\"</span>) <span class=\"hljs-comment\">// name 속성 : 필드명을 다르게 지정하고 싶을 때</span>\n    <span class=\"hljs-keyword\">private</span> String title;\n    <span class=\"hljs-keyword\">private</span> String description;\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">int</span> priority;\n    <span class=\"hljs-meta\">@Ignore</span> <span class=\"hljs-comment\">// 데이터베이스에서 칼럼으로 생성되기를 원치 않을 때</span>\n    Bitmap picture;\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Note</span><span class=\"hljs-params\">(String title, String description, <span class=\"hljs-keyword\">int</span> priority)</span> </span>{\n        <span class=\"hljs-keyword\">this</span>.title = title;\n        <span class=\"hljs-keyword\">this</span>.description = description;\n        <span class=\"hljs-keyword\">this</span>.priority = priority;\n    }\n\n    <span class=\"hljs-comment\">// ..생략 (반드시, getter setter 필요)</span>\n}\n</code></pre>\n<h2>3. DAO (NoteDao.interface)</h2>\n<p>데이터베이스의 데이터에 접근하기 위해서는 DAO가 필요하다. 직접적인 쿼리를 작성하는 대신 DAO 클래스를 사용하여 데이터베이스에 추상적으로 접근한다. <span class=\"clr-note\">DAO는 interface나 abstract class가 되야한다.</span></p>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Dao</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title\">NoteDao</span> </span>{\n\n    <span class=\"hljs-meta\">@Insert</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(Note note)</span></span>;\n\n    <span class=\"hljs-meta\">@Update</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">update</span><span class=\"hljs-params\">(Note note)</span></span>;\n\n    <span class=\"hljs-meta\">@Delete</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">delete</span><span class=\"hljs-params\">(Note note)</span></span>;\n\n    <span class=\"hljs-meta\">@Query</span>(<span class=\"hljs-string\">\"DELETE FROM note_table\"</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">deleteAllNotes</span><span class=\"hljs-params\">()</span></span>;\n\n    <span class=\"hljs-meta\">@Query</span>(<span class=\"hljs-string\">\"SELECT * FROM note_table ORDER BY priority DESC\"</span>)\n    LiveData&lt;List&lt;Note&gt;&gt; getAllNotes();\n}\n</code></pre>\n","updatedAt":"2020-01-22T18:23:54.163Z"}