{"layout":"post-content","title":"(안드로이드) 어댑터뷰를 사용해보자","date":"2018-12-02T00:00:00.000Z","tags":["android"],"category":["android"],"body":"<p>[될때까지 안드로이드] 어댑터뷰 파트의 내용을 정리한 글입니다.</p>\n<p>ListView 와 GridView</p>\n<ul>\n<li>반복되고 양이 많은 데이터를 표시하고 싶을 때</li>\n<li>이미지와 같이 메모리를 차지하는 리소스를 표시하고 싶을 때</li>\n<li>모두 AdapterView 추상클래스를 상속받아 어댑터 패턴을 사용하여 데이터를 뷰에 표시한다.</li>\n<li>ScrollView의 경우 한번에 모든 컨텐츠를 로드하므로 컨텐츠가 메모리를 많이 사용할 경우 메모리 부족으로 앱이 종료될 수 있다.</li>\n</ul>\n<h1>AdapterView</h1>\n<hr>\n<p>AdapterView를 상속받은 뷰들은 화면에 보이는 내용만 로드하는 기법을 사용한다.</p>\n<h2>1. AdapterView의 구현</h2>\n<p>데이터 준비하기</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//MainActivity.java</span>\nArrayList&lt;Weather&gt; data = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Weather&gt;()\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"수원\"</span>, <span class=\"hljs-string\">\"25도\"</span>, <span class=\"hljs-string\">\"맑음\"</span>));\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"안양\"</span>, <span class=\"hljs-string\">\"22도\"</span>, <span class=\"hljs-string\">\"비\"</span>));\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"부천\"</span>, <span class=\"hljs-string\">\"22도\"</span>, <span class=\"hljs-string\">\"구름\"</span>));\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"성남\"</span>, <span class=\"hljs-string\">\"24도\"</span>, <span class=\"hljs-string\">\"맑음\"</span>));\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"서울\"</span>, <span class=\"hljs-string\">\"28도\"</span>, <span class=\"hljs-string\">\"구름\"</span>));\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"광주\"</span>, <span class=\"hljs-string\">\"30도\"</span>, <span class=\"hljs-string\">\"비\"</span>));\ndata.add(<span class=\"hljs-keyword\">new</span> Weather(<span class=\"hljs-string\">\"부산\"</span>, <span class=\"hljs-string\">\"20도\"</span>, <span class=\"hljs-string\">\"비\"</span>));\n</code></pre>\n<p>데이터를 뷰에 연결해 줄 어댑터를 준비한다.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//MainActivity.java</span>\nMyFirstAdapter adapter = <span class=\"hljs-keyword\">new</span> MyFirstAdapter(data);\n</code></pre>\n<p>뷰에 어댑터를 붙인다.</p>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">//MainActivity.java</span>\nListView listView = (ListView) findViewById(R.id.list_view);\nlistView.setAdapter(adapter);\n</code></pre>\n<h2>2. 클릭 이벤트 구현</h2>\n<p>public static interface AdapterView.OnItemClickListener<br>\n<span class=\"clr-grey\">android.widget.AdapterView.OnItemClickListener : 어댑터뷰의 아이템 클릭시 호출되는 콜백 메서드를 정의한 인터페이스</span></p>\n<p>public abstract void onItemClick (AdapterView&lt;?&gt; parent, View view, int position, long id)<br>\n<span class=\"clr-grey\">\nparent : 클릭이 일어난 AdapterView<br>\nview : AdapterView 안의 클릭된 View = 클릭된 아이템 뷰<br>\nposition : 클릭된 아이템 뷰의 위치<br>\nid : 클릭된 아이템 뷰의 row ID\n</span></p>\n<pre><code class=\"language-java\">listView.setOnItemClickListener(<span class=\"hljs-keyword\">new</span> AdapterView.OnItemClickListener() {\n  <span class=\"hljs-meta\">@Override</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">onItemClick</span><span class=\"hljs-params\">(AdapterView&lt;?&gt; parent, View view, <span class=\"hljs-keyword\">int</span> position, <span class=\"hljs-keyword\">long</span> id)</span> </span>{\n    Toast.makeText(MainActivity.<span class=\"hljs-keyword\">this</span>, position + <span class=\"hljs-string\">\" 번째 아이템 선택\"</span>, Toast.LENGTH_SHORT).show();\n   }\n});\n</code></pre>\n<h2>3. 예제 구성</h2>\n<ol>\n<li>\n<p>Weather.java\n날씨를 표현하는 모델클래스<br>\n<span class=\"clr-grey\"> toString() : 모든 클래스가 가지고 있는 기본메서디로 디버깅이나 로그에서 정보 확인을 위해 toString() 메서드 재정의한다. </span></p>\n</li>\n<li>\n<p>MyFirstAdapter.java<br>\n추상클래스인 BaseAdapter를 상속받는 클래스로 추상 메서드들을 구현해야 한다.<br>\n<span class=\"clr-grey\"> Note: BaseAdapter는 어댑터의 기능을 추상화해 둔 추상 클래스, 각 메서드 재정의 필요 </span></p>\n</li>\n</ol>\n<pre><code class=\"language-java\"> <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> View <span class=\"hljs-title\">getView</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>{\n        <span class=\"hljs-comment\">/**\n         * LayoutInflater 클래스란?\n         * Activity 이외의 클래스에서 Context를 통해 XML로 정의한 레이아웃을 로드하여 View로 반환해주는 클래스\n         */</span>\n        ViewHolder holder;\n        <span class=\"hljs-keyword\">if</span> (convertView == <span class=\"hljs-keyword\">null</span>) {\n            holder = <span class=\"hljs-keyword\">new</span> ViewHolder();\n            convertView = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_weather, parent, <span class=\"hljs-keyword\">false</span>);\n            ImageView weatherImage = (ImageView) convertView.findViewById(R.id.weather_image);\n            TextView cityText = (TextView) convertView.findViewById(R.id.city_text);\n            TextView tempText = (TextView) convertView.findViewById(R.id.temp_text);\n            holder.cityText = cityText;\n            holder.tempText = tempText;\n            holder.weatherImage = weatherImage;\n            convertView.setTag(holder);\n        } <span class=\"hljs-keyword\">else</span> {\n            holder = (ViewHolder) convertView.getTag();\n        }\n\n        Weather weather = mData.get(position);\n        holder.cityText.setText(weather.getCity());\n        holder.tempText.setText(weather.getTemp());\n        holder.weatherImage.setImageResource(mWeatherImageMap.get(weather.getWeather()));\n        <span class=\"hljs-keyword\">return</span> convertView;\n    }\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ViewHolder</span> </span>{\n        ImageView weatherImage;\n        TextView cityText;\n        TextView tempText;\n    }\n</code></pre>\n<ul>\n<li>핵심메서드 getView() 작성\n<ul>\n<li>각 아이템이 화면에 표시될 때마다 호출되며, 여기서 화면에 표시할 레이아웃과 데이터를 모두 작성해야한다.</li>\n<li>ListView의 각 아이템에 해당되는 View는 화면에 보이는 만큼만 생성되고 스크롤 시에 안쓰이는 아이템은 새로 보이는 아이템의 View로 재사용된다.<br>\n<span class=\"clr-grey\"> Note: 두번째 파라미터인 convertView가 재사용 시에 이전에 생성되었던 getView()가 반환했던 View </span></li>\n</ul>\n</li>\n<li>LayoutInflater 추상 클래스\n<ul>\n<li>Activity 이외의 클래스에서 Context를 통해 XML로 정의한 레이아웃을 로드하여 View로 반환해주는 클래스</li>\n<li>레이아웃 XML 파일을 View 객체로 반환한다.</li>\n<li>LayoutInflater 인스턴스 받는 법 : <strong>Activity.getLayoutInflater()</strong> or <strong>Context.getSystemService(Class)</strong></li>\n<li>Public methods<br>\n<span class=\"clr-grey\">\n-LayoutInflater.from(parent.getContext())<br>\n현재 Context로부터 LayoutInflater 인스턴스를 반환받는다.<em>static LayoutInflater</em><br>\n-LayoutInflater.from(parent.getContext()).inflate(R.layout.item_weather, parent, false);<br>\ninflate(int resource, ViewGroup root, boolean attachToRoot)<br>\nxml파일 item_weather을 View 객체 형태로 반환한다.\n</span></li>\n</ul>\n</li>\n<li>ViewHolder\n자주 사용하는 뷰를 한번 로드하면 재사용하고 표시할 내용만 교체하기 위한 패턴\n<ul>\n<li>View 안에 여러 데이터를 담고 싶을 때, getTag(), setTag()를 사용한다.<br>\n<span class=\"clr-grey\">android.view.View, Tag는 Object 타입이라 다양한 용도로 사용가능</span></li>\n</ul>\n</li>\n</ul>\n","updatedAt":"2020-01-22T18:23:44.561Z"}