{"layout":"post-content","title":"(안드로이드) RecyclerView를 사용하자","date":"2018-12-05T00:00:00.000Z","tags":["android"],"category":["android"],"body":"<p>[될 때까지 안드로이드]의 RecyclerView 파트를 정리한 내용입니다.</p>\n<p>어댑터 뷰의 성능을 개선한 컴포넌트로 애니메이션을 지원하고 뷰홀더 패턴을 강제한다.<br>\n대신 이벤트 리스너와 커서를 지원하지 않는 단점이 있다.</p>\n<hr>\n<h2>어댑터 뷰의 단점</h2>\n<ol>\n<li>빠르게 스크롤 할 때 성능문제와 불필요한 지연 문제가 있다.</li>\n<li>데이터 목록이 변경되었을 때, <code class=\"codetainer\">notifyDataSetChanged()</code> 메서드를 빈번하게 호출하여 전체 아이템을 갱신하는 데 비용이 많이 든다. 이 메서드는 항상 전체 항목을 새로 로드한다.</li>\n</ol>\n<h2>리사이클러 뷰 vs 어댑터 뷰</h2>\n<ul>\n<li>상속 받는 클래스 : RecyclerView.Adapter vs BaseAdapter</li>\n<li>리사이클러 뷰는 레이아웃 매니저를 지정해줘야 한다.</li>\n<li>리사이클러 뷰는 뷰홀더 패턴을 반드시 구현해야한다.</li>\n</ul>\n<h2>리사이클러 뷰 관련 클래스</h2>\n<ol>\n<li>\n<p>RecyclerView.Adapter : 어댑터 역할</p>\n</li>\n<li>\n<p>RecyclerView.ViewHolder : 뷰홀더 클래스가 상속받아야 할 클래스</p>\n</li>\n<li>\n<p>LayoutManager : 아이템을 어떻게 배치할 것 인가</p>\n<ul>\n<li>LinearLayoutManager</li>\n<li>GridLayoutManager</li>\n<li>StaggeredGridLayoutManager</li>\n</ul>\n</li>\n<li>\n<p>RecyclerView.ItemAnimator : 아이템이 추가, 삭제, 재정렬 시 애니메이션 어떻게 할 것인가</p>\n</li>\n<li>\n<p>RecyclerView.ItemDecoration : 아이템을 세부적으로 어떻게 꾸밀 것인가</p>\n</li>\n</ol>\n<h2>리사이클러 통지 메서드</h2>\n<ul>\n<li><code class=\"codetainer\">notifyItemInserted(int position)</code> : position 위치의 아이템이 삽입된 것을 통지</li>\n<li><code class=\"codetainer\">notifyItemRemoved(int position)</code> : position 위치의 아이템이 삭제된 것을 통지</li>\n</ul>\n<h2>관련 메서드</h2>\n<ul>\n<li><code class=\"codetainer\">void setHasFixedSize (boolean hasFixedSize)</code> : 각 아이템의 변화가 리사이클러 뷰의 전체 크기에 영향을 끼치지 않는다면 true를 사용한다.</li>\n</ul>\n","updatedAt":"2020-01-22T18:23:44.567Z"}